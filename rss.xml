<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yiming Chen</title>
    <link>https://yiming.dev</link>
    <description>My rants against Life and Software.</description>
    <pubDate>Mon, 19 Jul 2021 06:23:34 CST</pubDate>
    <lastBuildDate>Mon, 19 Jul 2021 06:23:34 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Stop using Behaviour to define interfaces, use Protocol!</title>
      <link>https://yiming.dev/blog/2021/07/18/stop-using-behaviour-to-define-interfaces-use-protocol</link>
      <description><![CDATA[I think Elixir developers (me included) often misuse Behaviour to define common interfaces. In this post, I'd propose to use Protocol for defining common interfaces and use Behaviour for sharing common logic. And you may see why I made Promox and Objext to fill the gaps I find in the current Elixir community.]]></description>
      <content:encoded><![CDATA[<section id="content" role="main">
    <div id="post-container">
        <h1>Stop using Behaviour to define interfaces, use Protocol!</h1>
        <p>
I think Elixir developers (me included) often misuse Behaviour to define common interfaces.<br />
</p>

<p>
For example, let's say we have a <code>Weather</code> interface:<br />
</p>
<div class="org-src-container">
<pre class="src src-elixir">defmodule Weather do
  @callback temperature(Location.t()) :: {:ok, Temperature.t()}
end

defmodule Weather.SourceA do
  @behaviour Weather

  @impl Weather
  def temperature(location), do: ...
end

Mox.defmock(Weather.Mock, for: Weather)
</pre>
</div>

<p>
Then we need to inject a <code>module</code> into the caller function in order to achieve polymorphism:<br />
</p>
<div class="org-src-container">
<pre class="src src-elixir">def controller(weather_mod) do
  location = ...
  temp = weather_mod.temperature(location)
  ...
end
</pre>
</div>

<div id="outline-container-Something%20is%20off" class="outline-2">
<h2 id="Something%20is%20off">Something is off</h2>
<div class="outline-text-2" id="text-Something%20is%20off">
<p>
This is a valid use case for Behaviour, but I always feel something is off here:<br />
</p>
<ol class="org-ol">
<li>The name <code>behaviour</code> / <code>callback</code> confused me a lot when I first learned about this design pattern in Elixir.<br />
Coming from a Object-Oriented background, what I want is just <code>interface</code> and <code>implementation</code>.<br />
&gt; I can understand <code>behaviour</code> as a different way of saying <code>interface</code>.<br />
&gt; But what's this <code>callback</code> non-sense?<br /></li>
<li>We need to pass the module around as variables in our application code.<br />
This adds more difficulties to tools like <code>mix xref</code> to analyze our code.<br /></li>
<li>The mocks defined by <code>Mox</code> are basically modules that have some global state.<br />
Which means that:<br />
<ol class="org-ol">
<li>We need to use <code>global</code> mock sometimes, or spend some efforts to allow a child process to use the <code>private</code> mock.<br /></li>
<li><p>
We can't have 2 mocks with different <code>expect</code>-s or <code>stub</code>-s for the same Beahviour.<br />
For example, to test the following <code>chain/2</code> function, we may need to call <code>Mox.defmock</code> twice, which is so weird that I guess no body would actually do it.<br />
</p>
<div class="org-src-container">
<pre class="src src-elixir">defmodule Weather.Chainable do
  def chain(source1, source2) do
    fn location -&gt;
      with {:ok, temp} &lt;- source1.temperature(location) do
        {:ok, temp}
      else
        {:error, _} -&gt;
          source2.temperature(location)
      end
    end
  end
end

Mox.defmock(Weather.Mock1, for: Weather)
Mox.defmock(Weather.Mock2, for: Weather)
</pre>
</div></li>
</ol></li>
<li><p>
A common pattern is to delegate function calls from behaviour module to callback modules:<br />
</p>
<div class="org-src-container">
<pre class="src src-elixir">defmodule Weather do
  @callback temperature(Location.t()) :: {:ok, Temperature.t()}

  @weather_mod Application.get_env(:my_app, :weather_mod)

  defdelegate temperature(location), to: @weather_mod
end
</pre>
</div>
<p>
And this pattern is so common that we have a library for it:<br />
<a href="https://github.com/sascha-wolf/knigge">https://github.com/sascha-wolf/knigge</a><br />
</p></li>
</ol>

<p>
Actually, I'm not the only one who feels this oddness:<br />
</p>
<blockquote class="twitter-tweet" data-dnt="true"><p lang="en" dir="ltr">This use is almost entirely the inverse of how I usually see behaviors being used in Elixir.<br><br>Here, they tend to define a public interface, and are often used to separate out pure code from impure code: by defining an interface for a client to a third-party system, for example.</p>&mdash; Quinn Wilton (@wilton_quinn) <a href="https://twitter.com/wilton_quinn/status/1408191089316560898?ref_src=twsrc%5Etfw">June 24, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
</div>

<div id="outline-container-Pure%20interfaces%20%28Protocol%29%20vs.%20Impure%20interfaces%20%28Behaviour%29" class="outline-2">
<h2 id="Pure%20interfaces%20%28Protocol%29%20vs.%20Impure%20interfaces%20%28Behaviour%29">Pure interfaces (Protocol) vs. Impure interfaces (Behaviour)</h2>
<div class="outline-text-2" id="text-Pure%20interfaces%20%28Protocol%29%20vs.%20Impure%20interfaces%20%28Behaviour%29">
<p>
Inspired by the thread above, I think I've found the reason why defining common interfaces via Behaviour feels off to me:<br />
Because the whole Behaviour mechanism from Erlang/OTP was designed to define <b>impure</b> interfaces, rather than <b>pure</b> interfaces.<br />
</p>
<dl class="org-dl">
<dt>Pure interfaces</dt><dd>Pure interface function don't have any logic inside it.<br />
All it does is to dispatch the function call to an implementation module.<br />
Like the <code>Inspect.inspect/2</code> protocol function.<br /></dd>
<dt>Impure interfaces</dt><dd><p>
Impure interface function not only dispatches the function call, but also adds more features upon this function call.<br />
</p>

<p>
The best example would be <code>GenServer</code>:<br />
First of all, <code>GenServer</code> is an interface for sure.<br />
We can think of callbacks like <code>handle_info</code>, <code>handle_call</code>, <code>handle_cast</code> as common interfaces,<br />
i.e. all the callback modules need to implement these interfaces.<br />
And <code>GenServer</code> would do all the dynamic dispatching for us.<br />
</p>

<p>
But are we using <code>GenServer</code> just for polymorphism?<br />
I guess every Elixir/Erlang developer would answer "NO".<br />
The real power of <code>GenServer</code> is complex async logic encapsulated inside <code>GenServer.call</code>, <code>GenServer.cast</code>, etc..<br />
Because these logic are so common, they get extracted as shared functions like <code>GenServer.call</code>.<br />
Every callback module we write leverages these common logic.<br />
So that we don't need to care how to handle the async mess, and can just write our business logic in a procedural way.<br />
</p>

<p>
Note here "impure" is just a neutral adjective.<br />
(I really hope I could've found a better adjective-pair than pure/impure.)<br />
I don't mean that impure interfaces are worse than pure interfaces.<br />
(As impure functions are not worse or better than pure functions.)<br />
From the <code>GenServer</code> example, I even believe that impure interfaces are way better than pure interfaces.<br />
Because every time we define a callback module, we are reusing the logic encapsulated in impure interfaces.<br />
This means that every line of code we add to the impure interface would be extremely cost-effective, because the effect of that code is amplified by the number of callback modules we have.<br />
</p></dd>
</dl>

<p>
So I believe that defining common interface with Behaviour is just scratching the surface of the power of Behaviour.<br />
We are misusing a powerful design pattern for defining impure interfaces, and we just use it to define pure interfaces.<br />
What we really should do is to <b>extract as many common logic to the behaviour module</b>, in a way that the callback modules can be deadly simple.<br />
(Based on this argument, <code>defdelegate</code> from a behaviour module to a callback module is definitely an anti-pattern.)<br />
</p>

<p>
Finally, if you really need to define a common interface, then I believe the right way to do it in Elixir is <code>Protocol</code>.<br />
As it was explained in the <a href="https://hexdocs.pm/elixir/Protocol.html">official doc</a>:<br />
</p>
<blockquote>
<p>
A protocol specifies an API that should be defined by its implementations.<br />
</p>
</blockquote>
<p>
Then you may find <a href="https://github.com/dsdshcym/promox">Promox</a> useful as it helps you define mocks for Protocols easily in your tests :).<br />
</p>
</div>
</div>

<div id="outline-container-Objext%3A%20From%20Protocol%20to%20Behaviour" class="outline-2">
<h2 id="Objext%3A%20From%20Protocol%20to%20Behaviour">Objext: From Protocol to Behaviour</h2>
<div class="outline-text-2" id="text-Objext%3A%20From%20Protocol%20to%20Behaviour">
<p>
Now you may notice a gap between Protocol and Behaviour:<br />
What if I start with a Protocol that defines an interface, but then I want to extract more common logic to the interface functions, to make them more powerful like <code>GenServer.call</code>?<br />
</p>

<p>
The most common solution in Elixir is to define another module (<code>Enum</code>) besides the Protocol module (<code>Enumerable</code>).<br />
But I find it hard to name the Protocol module already, not to say I need to name 2 modules.<br />
(Naming is hard in software development, right?)<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup><br />
</p>

<p>
Besides the difficulty of naming 2 modules, I still believe a separate module should be unnecessary.<br />
To me, Protocol and Behaviour are both ways to define interfaces.<br />
The only difference is the amount of common logic at the interface level:<br />
</p>
<ul class="org-ul">
<li>Protocol has no common logic, it's just pure interfaces<br /></li>
<li>Behaviour has a ton of common logic, we should be able to grow pure interfaces into this kind of complex interfaces.<br /></li>
</ul>

<p>
Given this reason, I made <a href="https://github.com/dsdshcym/objext">Objext</a>, which allows you to define interfaces in Elixir easily.<br />
(plus some other goodies like fully-encapsulated data structure and Promox-like mock features.)<br />
</p>
</div>
</div>

<div id="outline-container-Takeaways" class="outline-2">
<h2 id="Takeaways">Takeaways</h2>
<div class="outline-text-2" id="text-Takeaways">
<p>
If anything you can take away from this blog post, I hope is this:<br />
<b>be aware of what kind of interface you are going to define</b>,<br />
</p>
<ol class="org-ol">
<li>use Protocol for pure interfaces<br /></li>
<li>use Behaviour for impure interfaces<br /></li>
<li>grow pure interfaces to impure interfaces when possible<br /></li>
</ol>

<p>
These tips can be achieved with Protocol and Behaviour with some dedicated discipline.<br />
If you find that cumbersome, you may find <a href="https://github.com/dsdshcym/promox">Promox</a> and <a href="https://github.com/dsdshcym/objext">Objext</a> to be useful.<br />
Please give them try and let me know how they compare to Mox and Protocol.<br />
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
If you are also like me, who's bad at naming things but still wants to use Protocol.<br />
You can use <code>Kernel.def</code> inside your <code>Protocol</code> definition,<br />
so you can define a normal function instead of a callback function:<br />
</p>
<div class="org-src-container">
<pre class="src src-elixir">defprotocol Enumerable do
  Kernel.def map(enumerable, map_fn) do
    reduce(enumerable, [], &amp;(&amp;2 ++ [map_fn.(&amp;1)]))
  end

  def reduce(enumerable, acc, fun)
end
</pre>
</div></div></div>


</div>
</div>
    </div>
</section>
]]></content:encoded>
      <pubDate>2021-07-19</pubDate>
      <guid>https://yiming.dev/blog/2021/07/18/stop-using-behaviour-to-define-interfaces-use-protocol</guid>
    </item>
    <item>
      <title>What I learned from implementing Combinators in 3 Elixir patterns</title>
      <link>https://yiming.dev/blog/2021/06/13/what-i-learned-from-implementing-combinators-in-3-elixir-patterns</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2021-06-28</pubDate>
      <guid>https://yiming.dev/blog/2021/06/13/what-i-learned-from-implementing-combinators-in-3-elixir-patterns</guid>
    </item>
    <item>
      <title>Clippings of 2020 June &amp; July</title>
      <link>https://yiming.dev/clipping/2020/07/31/clippings-of-2020-june-and-july</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-07-31</pubDate>
      <guid>https://yiming.dev/clipping/2020/07/31/clippings-of-2020-june-and-july</guid>
    </item>
    <item>
      <title>CSSKatas: A Better Way to Sharpen Your CSS Skills</title>
      <link>https://yiming.dev/blog/2020/07/24/css-katas-a-better-way-to-sharpen-your-css-skills</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-07-24</pubDate>
      <guid>https://yiming.dev/blog/2020/07/24/css-katas-a-better-way-to-sharpen-your-css-skills</guid>
    </item>
    <item>
      <title>Making Audit Logs on Hex.pm Public</title>
      <link>https://yiming.dev/blog/2020/06/29/making-audit-logs-on-hex-pm-public</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-06-29</pubDate>
      <guid>https://yiming.dev/blog/2020/06/29/making-audit-logs-on-hex-pm-public</guid>
    </item>
    <item>
      <title>Clippings of 2020 May</title>
      <link>https://yiming.dev/clipping/2020/06/01/clippings-of-2020-may</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-06-28</pubDate>
      <guid>https://yiming.dev/clipping/2020/06/01/clippings-of-2020-may</guid>
    </item>
    <item>
      <title>Book Review: The Goal - A Process of Ongoing Improvement</title>
      <link>https://yiming.dev/blog/2020/06/05/book-review-the-goal-a-process-of-ongoing-improvement</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-06-08</pubDate>
      <guid>https://yiming.dev/blog/2020/06/05/book-review-the-goal-a-process-of-ongoing-improvement</guid>
    </item>
    <item>
      <title>Phoenix LiveView 简介</title>
      <link>https://yiming.dev/blog/2020/05/17/an-introduction-to-phoenix-live-view</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-05-17</pubDate>
      <guid>https://yiming.dev/blog/2020/05/17/an-introduction-to-phoenix-live-view</guid>
    </item>
    <item>
      <title>Clippings of 2020 Apr</title>
      <link>https://yiming.dev/clipping/2020/05/13/clippings-of-2020-apr</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-05-14</pubDate>
      <guid>https://yiming.dev/clipping/2020/05/13/clippings-of-2020-apr</guid>
    </item>
    <item>
      <title>如何在阿里云上部署 Dokku - 打造私有软件部署平台</title>
      <link>https://yiming.dev/blog/2020/05/09/setup-dokku-on-an-aliyun-server</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-05-11</pubDate>
      <guid>https://yiming.dev/blog/2020/05/09/setup-dokku-on-an-aliyun-server</guid>
    </item>
  </channel>
</rss>