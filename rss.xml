<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Tue, 27 Nov 2018 17:09:20 CST</pubDate>
    <lastBuildDate>Tue, 27 Nov 2018 17:09:20 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>$handle_undefined_function in Elixir/Erlang</title>
      <link>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>$handle_undefined_function in Elixir/Erlang</h1>
            <p>
I was searching for ways to implement Ruby's <code>method_missing</code> in
Elixir the other day. Then I ran into this package:
<a href="https://github.com/andrewvy/method_missing">andrewvy/method_missing: Elixir Library for dynamic code
execution</a>. And it implements exactly what I want: a <code>method_missing</code>
function to dynamically generate function body for what's not defined
yet.
</p>

<div class="org-src-container">
<pre class="src src-elixir">defmodule Dog do
  use MethodMissing

  def method_missing(func, _args) do
    func_name = Atom.to_string(func)

    cond do
      Regex.match?(~r/bark|woof/, func_name) -&gt; "WOOF"
      true -&gt; "?"
    end
  end
end

Dog.bark()
# &gt; "WOOF"
Dog.woof()
# &gt; "WOOF"
Dog.meow()
# &gt; "?"
</pre>
</div>

<p>
I was curious about how it was implemented in Elixir, so I looked into
the <code>lib</code> directory. Surprisingly, it's fairly simple:
</p>

<div class="org-src-container">
<pre class="src src-elixir">defmodule MethodMissing do
  defmacro __using__(_opts) do
    quote do
      def method_missing(_func, _args) do
      end

      def unquote(:"$handle_undefined_function")(func, args), do: method_missing(func, args)

      defoverridable method_missing: 2
    end
  end
end
</pre>
</div>

<p>
From this implementation, we can know that we don't even need to use
this package to get <code>method_missing</code> in Elixir. (The name
<code>method_missing</code> is not very functional either.)
</p>

<p>
All we need to do is to define <code>$handle_undefined_function/2</code>. And
just like <code>method_missing</code>, it will receive two arguments, one for the
function name, and one for the list of arguments.
</p>

<p>
Again, I want to praise Elixir/Erlang when I discovered this
feature. Almost every time I miss something in Ruby, Elixir already
has a solution for that.
</p>

<p>
Although, I doubt that <code>$handle_undefined_function</code> will be as popular
in the Elixir community as <code>method_missing</code> in the Ruby community.
</p>
<ol class="org-ol">
<li><p>
Elixir is a language that emphasize on explicity.
</p>

<p>
Looking for behaviors that are hidden under
<code>$handle_undefined_function</code> is a long trip.
</p>

<p>
This kind of meta-programming would always be the last resort for an
Elixir developer.
</p></li>

<li><p>
<code>$handle_undefined_function</code> might not be as efficient as
<code>method_missing</code>
</p>

<p>
When we use <code>method_missing</code>, we usually use <code>define_method</code> to
speed up future method calls.
</p>

<p>
But Elixir, as a compiled language, doesn't have a function like
<code>define_method</code> to generate new functions. So it may be much slower.
</p></li>
</ol>

<p>
After all, I'm very glad that Elixir/Erlang provide us an option to do
this kind of meta-programming. And I can't wait to see more surprises
Elixir/Erlang bring to me in the future.
</p>

    </div>
</section>
]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</guid>
    </item>
    <item>
      <title>Similarities between TDD and Management</title>
      <link>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</guid>
    </item>
    <item>
      <title>Don&#39;t Repeat Your Domain Knowledge</title>
      <link>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-10-26</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</guid>
    </item>
    <item>
      <title>Clippings from Domain-Driven Design</title>
      <link>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</guid>
    </item>
    <item>
      <title>Clippings from Extreme Programming Explained</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</guid>
    </item>
    <item>
      <title>What Agility Really Means</title>
      <link>http://dsdshcym.github.io/clipping/2018/03/30/what-agility-really-means</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/03/30/what-agility-really-means</guid>
    </item>
    <item>
      <title>How to do Outside-In TDD with Phoenix</title>
      <link>http://dsdshcym.github.io/blog/2018/08/04/how-to-do-outside-in-tdd-with-phoenix</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-04</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/08/04/how-to-do-outside-in-tdd-with-phoenix</guid>
    </item>
    <item>
      <title>记一个由 Surge 更新发现的 Bug</title>
      <link>http://dsdshcym.github.io/blog/2018/07/24/a-bug-discovered-via-upgrading-Surge</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-07-24</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/07/24/a-bug-discovered-via-upgrading-Surge</guid>
    </item>
    <item>
      <title>Five minute journal</title>
      <link>http://dsdshcym.github.io/clipping/2018/07/12/five-minute-journal</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-07-12</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/07/12/five-minute-journal</guid>
    </item>
    <item>
      <title>TIL: mix test --stale</title>
      <link>http://dsdshcym.github.io/blog/2018/07/10/til-mix-test-stale</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-07-10</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/07/10/til-mix-test-stale</guid>
    </item>
  </channel>
</rss>