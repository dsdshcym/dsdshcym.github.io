<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Tue, 12 Dec 2017 21:49:55 CST</pubDate>
    <lastBuildDate>Tue, 12 Dec 2017 21:49:55 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Imperative Shell around the Functional Core</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core/imperative-shell-around-the-functional-core</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Imperative Shell around the Functional Core</h1>
            <p>
Elixir is the perfect language to build upon the methodology from this talk:
</p>
<blockquote>
<p>
Imperative Shell around the Functional Core
</p>
</blockquote>
<p>
-- from <a href="https://www.youtube.com/watch?v=yTkzNHF6rMs">RubyConf 12 - Boundaries by Gary Bernhardt - YouTube</a>
</p>

<p>
Elixir data structures are obviously immutable, and the code and data
are combined within the same <code>Module</code>. (The <code>FauxO</code> style programming
from this talk.)
</p>

<p>
And Gary even introduced Actor Model which is the concurrency model
used by Elixir/Erlang.
</p>

<p>
In Ruby, we need some self-disciplines to force ourselves to write an
imperative shell around the functional core. But in Elixir, the
language is already encouraging us to write code in this style. I
think that's why I feel so excited about Elixir.
</p>

<p>
This talk was also mentioned in:
</p>
<ol class="org-ol">
<li><a href="http://www.fullstackradio.com/78">78: Ben Orenstein - Our All-Time Favorite Refactorings | Full Stack Radio</a></li>
<li><a href="https://www.youtube.com/watch?v=9TmJZSBYPQA&amp;index=14&amp;list=PLTUHmtFhYC6iEwu4h2REYhNKCHFFHYngS">14 - 刘常洋 - Functional Programming Concepts - YouTube</a></li>
</ol>

    </div>
</section>
]]></description>
      <pubDate>2017-12-12</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core/imperative-shell-around-the-functional-core</guid>
    </item>
    <item>
      <title>Turn a long letter into a short one</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one/turn-a-long-letter-into-a-short-one</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-12</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one/turn-a-long-letter-into-a-short-one</guid>
    </item>
    <item>
      <title>「鲸鱼」用户和 28 效应</title>
      <link>http://dsdshcym.github.io/blog/2017/12/11/28-effect-and-whale-watching</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/11/28-effect-and-whale-watching</guid>
    </item>
    <item>
      <title>设计的能力边界</title>
      <link>http://dsdshcym.github.io/blog/2017/12/11/ux-coffee-eico-rockey</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/11/ux-coffee-eico-rockey</guid>
    </item>
    <item>
      <title>Write your code as if you&#39;re writing a letter</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-youre-writing-a-letter/write-your-code-as-if-you&#39;re-writing-a-letter</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-youre-writing-a-letter/write-your-code-as-if-you&#39;re-writing-a-letter</guid>
    </item>
    <item>
      <title>Book Review: 99 Bottles of OOP</title>
      <link>http://dsdshcym.github.io/blog/2017/12/08/book-review-99-bottles-of-oop</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-08</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/08/book-review-99-bottles-of-oop</guid>
    </item>
    <item>
      <title>Add STI to a Legacy ActiveRecord Model</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/add-sti-to-a-legacy-activerecord-model</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-08</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/add-sti-to-a-legacy-activerecord-model</guid>
    </item>
    <item>
      <title>给小白解释「面向对象」（问答体）</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/explain-OOP-to-a-novice</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-07</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/explain-OOP-to-a-novice</guid>
    </item>
    <item>
      <title>CRDT is used in both Teletype for Atom and Phoenix</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/crdt-is-used-in-both-teletype-for-atom-and-phoenix</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-07</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/crdt-is-used-in-both-teletype-for-atom-and-phoenix</guid>
    </item>
    <item>
      <title>How to write deliberately unmaintainable code?</title>
      <link>http://dsdshcym.github.io/blog/2017/12/05/how-to-write-deliberately-unmaintainable-code</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-05</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/05/how-to-write-deliberately-unmaintainable-code</guid>
    </item>
  </channel>
</rss>