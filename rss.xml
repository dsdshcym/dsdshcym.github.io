<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Tue, 15 Jan 2019 10:38:05 CST</pubDate>
    <lastBuildDate>Tue, 15 Jan 2019 10:38:05 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Don&#39;t Rewrite, Replace</title>
      <link>http://dsdshcym.github.io/clipping/2019/01/09/don&#39;t-rewrite-replace</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Don&#39;t Rewrite, Replace</h1>
            <blockquote>
<ul class="org-ul">
<li>Don't change things
<ol class="org-ol">
<li>add new things (via copy/paste)</li>
<li>migrate the clients</li>
<li>remove old things</li>
</ol></li>
</ul>
</blockquote>
<p>
-- from <a href="https://online-training.jbrains.ca/courses/wbitdd-01/lectures/133486">Add Fractions in Java Part 2 - The World's Best Intro to TDD, Level 1: TDD Done Right - jbrains.c</a>
</p>

<blockquote>
<ol class="org-ol">
<li>Introduce an abstraction around the code that is to be replaced,
and commit that for all to see.</li>
<li>Write a second implementation of the abstraction for the
to-be-introduced code, and commit that,</li>
<li>Flip the software 'off' switch to 'on' for the rest of the team,
and commit/push that.</li>
<li>Remove the to-be-replaced implementation</li>
<li>Remove the abstraction</li>
</ol>
</blockquote>
<p>
-- from <a href="https://trunkbaseddevelopment.com/branch-by-abstraction/">Branch by Abstraction - Trunk Based Development</a>
</p>

<p>
This 3-step rule is the safest way I know to change software. Because
in every step, we make sure the app still works:
</p>
<ol class="org-ol">
<li>Add a new thing
<ul class="org-ul">
<li>If no client is using the new thing, adding it won't affect any
of our old code.</li>
<li>If the adding action is also "safe", the existing behaviour won't
change in any way.</li>
</ul></li>
<li>Migrate the clients
<ul class="org-ul">
<li>We can migrate the clients one by one. And after each migration,
we run the tests and deploy the new tested version.</li>
<li>We repeat this process until all clients have been migrated.</li>
</ul></li>
<li>Remove the old thing
<ul class="org-ul">
<li>Then, since no client is using the old thing, removing it won't
affect any behaviour.</li>
<li>If the removing action is also "safe", the existing behaviour
won't change.</li>
</ul></li>
</ol>

<p>
And this rule can be applied in various scales of development
activities.
</p>
<ol class="org-ol">
<li>Code-level refactor (i.e. Extract method, extract
class, etc.)</li>
<li>Dependency-level replacement (i.e. 3rd-party library switch)</li>
<li>Application-level upgrade (i.e. replace a microservice)</li>
</ol>

<p>
This rule is also the core idea behind <a href="http://dsdshcym.github.io/blog/2017/04/09/review-of-refactoring-improving-the-design-of-existing-code/">Refactoring: Improving the
Design of Existing Code</a>, and that's why this book is so valuable.
Learn this rule to change your app in a controllable way. Happy
Hacking!
</p>

<p>
EDIT: If I've learned this rule before, I would be much more confident
when facing the two problems in <a href="http://dsdshcym.github.io/blog/2018/03/27/learn-incremental-deployment-the-hard-way/">Learn Incremental Deployment the Hard
Way - dsdshome</a>
</p>

    </div>
</section>
]]></description>
      <pubDate>2019-01-15</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/01/09/don&#39;t-rewrite-replace</guid>
    </item>
    <item>
      <title>How to pattern match a function in Elixir</title>
      <link>http://dsdshcym.github.io/blog/2019/01/03/how-to-pattern-match-a-function-in-elixir</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-01-03</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/01/03/how-to-pattern-match-a-function-in-elixir</guid>
    </item>
    <item>
      <title>My Monthly Best Reads (2018 Dec)</title>
      <link>http://dsdshcym.github.io/clipping/2019/01/02/my-monthly-best-reads-2018-dec</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-01-02</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/01/02/my-monthly-best-reads-2018-dec</guid>
    </item>
    <item>
      <title>Write Tests to Justify Your Design Decisions</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/25/write-tests-to-justify-your-design-decisions</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-26</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/25/write-tests-to-justify-your-design-decisions</guid>
    </item>
    <item>
      <title>No Code is Better Than No-Code</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-24</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</guid>
    </item>
    <item>
      <title>The Point of A Degree</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-13</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</guid>
    </item>
    <item>
      <title>Shall we test our Router?</title>
      <link>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-06</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</guid>
    </item>
    <item>
      <title>$handle_undefined_function in Elixir/Erlang</title>
      <link>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</guid>
    </item>
    <item>
      <title>Similarities between TDD and Management</title>
      <link>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</guid>
    </item>
    <item>
      <title>Don&#39;t Repeat Your Domain Knowledge</title>
      <link>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-10-26</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</guid>
    </item>
  </channel>
</rss>