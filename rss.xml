<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Thu, 14 Dec 2017 17:38:52 CST</pubDate>
    <lastBuildDate>Thu, 14 Dec 2017 17:38:52 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Use git bisect run to automatically find the first bad commit</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/14/use-git-bisect-run-to-automatically-find-the-first-bad-commit/use-git-bisect-run-to-automatically-find-the-first-bad-commit</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Use git bisect run to automatically find the first bad commit</h1>
            <blockquote>
<p>
Use <code>git bisect</code> to find the first bad commit.
</p>
</blockquote>
<p>
-- from <a href="https://www.youtube.com/watch?v=VMcMqrpjAjU">RubyConf 2017: "RSpec no longer works with ActiveRecord" by Sam Phippen - YouTube</a>
</p>

<p>
In this talk, Sam showed us how he debugged a rspec issue using <code>git bisect</code>.
</p>

<p>
But he is just manually using <code>git bisect good</code> and <code>git bisect bad</code>
to mark a commit as good/bad.
</p>

<p>
Actually, <code>git bisect</code> can run the script automatically:
</p>
<ol class="org-ol">
<li><code>git bisect start</code></li>
<li><code>git bisect good HEAD~4</code> (for example)</li>
<li><code>git bisect bad HEAD</code></li>
<li><code>git bisect run rspec spec/services/some_spec.rb</code></li>
</ol>
<p>
Then <code>git bisect</code> will automatically run the script and find the first
commit from which this spec started to fail.
</p>

<p>
But in this talk's case, we need to run the script in another git
directory. We can use shell script to switch to that directory first
and then run the test suite:
</p>

<div class="org-src-container">
<pre class="src src-sh">git bisect run sh -c 'cd another/project/; rspec spec/in/that/project'
</pre>
</div>

<p>
Of course, there are more complicated issues in real life projects,
like <code>gem</code> dependency issue in the talk. We can always fallback to
manually tagging a commit as good/bad if we find something unexpected
from the log of <code>git bisect run</code>.
</p>

<p>
You can also read more about <code>git bisect</code>, <code>rspec bisect</code> in my
previous post: <a href="http://dsdshcym.github.io/blog/2017/09/17/rspec-failures-caused-by-i18nlocale/">RSpec failures caused by I18n.locale - dsdshome</a>
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-14</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/14/use-git-bisect-run-to-automatically-find-the-first-bad-commit/use-git-bisect-run-to-automatically-find-the-first-bad-commit</guid>
    </item>
    <item>
      <title>Imperative Shell around the Functional Core</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core/imperative-shell-around-the-functional-core</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-12</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core/imperative-shell-around-the-functional-core</guid>
    </item>
    <item>
      <title>Turn a long letter into a short one</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one/turn-a-long-letter-into-a-short-one</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-12</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one/turn-a-long-letter-into-a-short-one</guid>
    </item>
    <item>
      <title>「鲸鱼」用户和 28 效应</title>
      <link>http://dsdshcym.github.io/blog/2017/12/11/28-effect-and-whale-watching</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/11/28-effect-and-whale-watching</guid>
    </item>
    <item>
      <title>设计的能力边界</title>
      <link>http://dsdshcym.github.io/blog/2017/12/11/ux-coffee-eico-rockey</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/11/ux-coffee-eico-rockey</guid>
    </item>
    <item>
      <title>Write your code as if you&#39;re writing a letter</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-youre-writing-a-letter/write-your-code-as-if-you&#39;re-writing-a-letter</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-youre-writing-a-letter/write-your-code-as-if-you&#39;re-writing-a-letter</guid>
    </item>
    <item>
      <title>Book Review: 99 Bottles of OOP</title>
      <link>http://dsdshcym.github.io/blog/2017/12/08/book-review-99-bottles-of-oop</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-08</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/08/book-review-99-bottles-of-oop</guid>
    </item>
    <item>
      <title>Add STI to a Legacy ActiveRecord Model</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/add-sti-to-a-legacy-activerecord-model</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-08</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/add-sti-to-a-legacy-activerecord-model</guid>
    </item>
    <item>
      <title>给小白解释「面向对象」（问答体）</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/explain-OOP-to-a-novice</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-07</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/explain-OOP-to-a-novice</guid>
    </item>
    <item>
      <title>CRDT is used in both Teletype for Atom and Phoenix</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/crdt-is-used-in-both-teletype-for-atom-and-phoenix</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-07</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/crdt-is-used-in-both-teletype-for-atom-and-phoenix</guid>
    </item>
  </channel>
</rss>