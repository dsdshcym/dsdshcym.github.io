<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Mon, 24 Dec 2018 12:17:40 CST</pubDate>
    <lastBuildDate>Mon, 24 Dec 2018 12:17:40 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>No Code is Better Than No-Code</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>No Code is Better Than No-Code</h1>
            <p>
The more code I write, the more I believe that: We should <b>think of
code as liabilities instead of assets</b>. So removing code is better
than adding code. And eventually, no code is better than no-code.
</p>

<ol class="org-ol">
<li><p>
<a href="https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to">Write code that is easy to delete, not easy to extend — programming is terrible</a>
</p>
<blockquote>
<ul class="org-ul">
<li><p>
Every line of code written comes at a price: maintenance.
</p>

<p>
My point today is that, if we wish to count lines of code, we
should not regard them as "lines produced" but as "lines
spent"
</p></li>

<li><p>
Good code isn't about getting it right the first time.
</p>

<p>
<b>Good code is just legacy code that doesn't get in the way.</b>
</p></li>
</ul>
</blockquote></li>
<li><p>
<a href="https://michaelfeathers.typepad.com/michael_feathers_blog/2011/05/the-carrying-cost-of-code-taking-lean-seriously.html">Michael Feathers: The Carrying-Cost of Code: Taking Lean Seriously</a>
</p>
<blockquote>
<ul class="org-ul">
<li>The future belongs to organizations that learn how to
strategically <b>delete</b> code.</li>
<li><b>Carrying costs are larger than we think.</b></li>
</ul>
</blockquote></li>
<li><p>
<a href="http://www.fullstackradio.com/94">94: Ben Orenstein - The Art of Pairing - Full Stack Radio</a>
</p>
<blockquote>
<p>
Think of code as both assets and liabilities
</p>
</blockquote></li>
<li><a href="https://twitter.com/chadfowler/status/999343859921510400">Chad Fowler on Twitter: "Instead of optimizing for code that can
live a long, healthy life, optimize for constantly destroying
and replacing code inside systems that live a long healthy
life. Code should be impermanent by design. Code is fuel.…
https://t.co/U4XwQ3gFW5"</a></li>
<li><a href="https://twitter.com/jbrains/status/1008348421294624768">☕ J. B. Rainsberger on Twitter: "Writing code to throw it away
ironically increases the need to design well, rather than
decreasing it. https://t.co/4iv9vXRq3b"</a></li>
<li><a href="http://dsdshcym.github.io/clipping/2018/02/08/adding-more-code-is-a-code-smell/">Adding more code is a code smell - dsdshome</a></li>
</ol>

    </div>
</section>
]]></description>
      <pubDate>2018-12-24</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</guid>
    </item>
    <item>
      <title>The Point of A Degree</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-13</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</guid>
    </item>
    <item>
      <title>Shall we test our Router?</title>
      <link>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-06</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</guid>
    </item>
    <item>
      <title>$handle_undefined_function in Elixir/Erlang</title>
      <link>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</guid>
    </item>
    <item>
      <title>Similarities between TDD and Management</title>
      <link>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</guid>
    </item>
    <item>
      <title>Don&#39;t Repeat Your Domain Knowledge</title>
      <link>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-10-26</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</guid>
    </item>
    <item>
      <title>Clippings from Domain-Driven Design</title>
      <link>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</guid>
    </item>
    <item>
      <title>Clippings from Extreme Programming Explained</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</guid>
    </item>
    <item>
      <title>What Agility Really Means</title>
      <link>http://dsdshcym.github.io/clipping/2018/03/30/what-agility-really-means</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/03/30/what-agility-really-means</guid>
    </item>
    <item>
      <title>How to do Outside-In TDD with Phoenix</title>
      <link>http://dsdshcym.github.io/blog/2018/08/04/how-to-do-outside-in-tdd-with-phoenix</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-04</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/08/04/how-to-do-outside-in-tdd-with-phoenix</guid>
    </item>
  </channel>
</rss>