<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Sat, 16 Dec 2017 22:55:53 CST</pubDate>
    <lastBuildDate>Sat, 16 Dec 2017 22:55:53 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Global Find Clipboard on macOS</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/16/global-find-clipboard-on-macos/global-find-clipboard-on-mac-os</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-16</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/16/global-find-clipboard-on-macos/global-find-clipboard-on-mac-os</guid>
    </item>
    <item>
      <title>What&#39;s Next For Phoenix</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/16/whats-next-for-phoenix/whats-next-for-phoenix</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>What&#39;s Next For Phoenix</h1>
            <p>
I just watched this another great talk from Chris McCord (creator of
Phoenix).
</p>

<p>
The part explaining Contexts was super awesome. <code>Context</code> really is
the way to write good code:
</p>
<blockquote>
<p>
Write dedicated modules that expose and group related functionality.
</p>
</blockquote>

<p>
And Chris also talked about what new features would come in Phoenix
1.4. Definitely worth check out.
</p>

<div id="outline-container-org06c3033" class="outline-2">
<h2 id="org06c3033">Notes</h2>
<div class="outline-text-2" id="text-org06c3033">
<ul class="org-ul">
<li>What makes a good Elixir Program? -&gt; What makes a good Program?
<ul class="org-ul">
<li>Easy to write</li>
<li>Easy to understand</li>
<li>Easy to change</li>
</ul></li>
<li>Programming is hard. Teaching programming is harder.</li>
<li>OOP -&gt; FP
<ul class="org-ul">
<li>Design Patterns are baggage in FP world</li>
<li><code>Mod.fun/arity</code> is not quite enough</li>
</ul></li>
<li>Contexts
<ul class="org-ul">
<li>Dedicated modules that expose and group related functionality</li>
<li>Don't be afraid to make decisions (context names)</li>
<li><p>
New comers are affected by Context thinking (explain Social
Reaction to a new comer)
</p>
<div class="org-src-container">
<pre class="src src-elixir">defmodule Reaction do
  alias CommunityContent.Post

  def add_like(user, %Post{} = post)

  def get_stats(post)
end

defmodule Reaction.PostReaction do
  schema "post_reactions" do
    field :user_id, :id
    field :post_id, :id
    field :sentiment, :string
  end
end
</pre>
</div></li>
<li>Experienced Erlang/Elixir developers are affected too
<ul class="org-ul">
<li>With Phoenix 1.1 =&gt; interleaved code</li>
<li>Clean up =&gt; "service" modules (like contexts)</li>
<li><b>It's important to have generators that encourages clean
boundaries</b></li>
</ul></li>
</ul></li>
<li>Phoenix 1.4: <b>Monitoring &amp; Metrics</b>
<ul class="org-ul">
<li>Application Performance Monitor (APM)
<ul class="org-ul">
<li>Common Interface for
<ul class="org-ul">
<li>elixir monitoring</li>
<li>Monitoring services (Datadog, NewRelic, etc.)</li>
</ul></li>
<li>Goals
<dl class="org-dl">
<dt>Efficiency</dt><dd>Data collection must not take out the application under load</dd>
<dt>Insights</dt><dd>Metrics should provide actionable insights for <i>non-experts</i></dd>
</dl></li>
<li>Available Metrics
<dl class="org-dl">
<dt>Gauge</dt><dd>instantaneous measurement
<ul class="org-ul">
<li>CPU usage</li>
<li>Memory usage</li>
</ul></dd>
<dt>Meter/Timer</dt><dd>rate of events over time with statistical distribution
<ul class="org-ul">
<li>requests per second</li>
</ul></dd>
<dt>Instrumenter</dt><dd>compile-time hooks into application events</dd>
</dl></li>
</ul></li>
<li>Breakpoint Debugger</li>
<li>Developer Dashboard</li>
<li>End-to-End Testing
<ul class="org-ul">
<li>Concurrent</li>
<li>Transactional</li>
<li><p>
JavaScript tests:
</p>

<p>
Call Phoenix endpoints to check-out/check-in Ecto Sandbox
connection
</p>
<div class="org-src-container">
<pre class="src src-elixir">def checkout(conn, _params) do
  Phoenix.Ecto.Sandbox.checkout(conn)
end

def checkin(conn, _params) do
  Phoenix.Ecto.Sandbox.checkin(conn)
end
</pre>
</div></li>
</ul></li>
<li>Easier Contribution
<ul class="org-ul">
<li>1st Contribution Sprint</li>
<li>Phoenix Guides are merged</li>
</ul></li>
</ul></li>
<li>Phoenix/Elixir have enabled many people building many useful stuffs
<ul class="org-ul">
<li>Make the previously unachievable, achievable</li>
</ul></li>
</ul>
<p>
-- from <a href="https://www.youtube.com/watch?v=zbbK0WOvWII">ElixirConf 2017 - Closing Keynote - Chris McCord - YouTube</a>
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2017-12-16</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/16/whats-next-for-phoenix/whats-next-for-phoenix</guid>
    </item>
    <item>
      <title>Notes from &quot;Why VSCode is better than Atom? - Teahour.fm&quot;</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/15/notes-from-why-vscode-is-better-than-atom---teahourfm/notes-from-why-vscode-is-better-than-atom-teahour-fm</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-15</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/15/notes-from-why-vscode-is-better-than-atom---teahourfm/notes-from-why-vscode-is-better-than-atom-teahour-fm</guid>
    </item>
    <item>
      <title>How to keep Ruby Relevant?</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/14/how-to-keep-ruby-relevant/how-to-keep-ruby-relevant</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-14</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/14/how-to-keep-ruby-relevant/how-to-keep-ruby-relevant</guid>
    </item>
    <item>
      <title>Use git bisect run to automatically find the first bad commit</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/14/use-git-bisect-run-to-automatically-find-the-first-bad-commit/use-git-bisect-run-to-automatically-find-the-first-bad-commit</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-14</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/14/use-git-bisect-run-to-automatically-find-the-first-bad-commit/use-git-bisect-run-to-automatically-find-the-first-bad-commit</guid>
    </item>
    <item>
      <title>Imperative Shell around the Functional Core</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core/imperative-shell-around-the-functional-core</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-12</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core/imperative-shell-around-the-functional-core</guid>
    </item>
    <item>
      <title>Turn a long letter into a short one</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one/turn-a-long-letter-into-a-short-one</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-12</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one/turn-a-long-letter-into-a-short-one</guid>
    </item>
    <item>
      <title>「鲸鱼」用户和 28 效应</title>
      <link>http://dsdshcym.github.io/blog/2017/12/11/28-effect-and-whale-watching</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/11/28-effect-and-whale-watching</guid>
    </item>
    <item>
      <title>设计的能力边界</title>
      <link>http://dsdshcym.github.io/blog/2017/12/11/ux-coffee-eico-rockey</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/11/ux-coffee-eico-rockey</guid>
    </item>
    <item>
      <title>Write your code as if you&#39;re writing a letter</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-youre-writing-a-letter/write-your-code-as-if-you&#39;re-writing-a-letter</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-11</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-youre-writing-a-letter/write-your-code-as-if-you&#39;re-writing-a-letter</guid>
    </item>
  </channel>
</rss>