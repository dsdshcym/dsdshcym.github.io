<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Tue, 16 Feb 2016 22:43:10 CST</pubDate>
    <lastBuildDate>Tue, 16 Feb 2016 22:43:10 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Add org-store-link Entry for elfeed</title>
      <link>http://dsdshcym.github.io/blog/2016/01/28/add-org-store-link-entry-for-elfeed</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Add org-store-link Entry for elfeed</h1>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Elfeed</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
Elfeed is a RSS client for Emacs. I've been using elfeed to read all my rss
feeds for a long time. And I really wish it can have some integrations with
org-mode like mu4e. So that I can capture a link to a RSS news entry to my notes
and jump to this directly using the link.
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">A Hack Way</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
So I posted a feature request on Elfeed's github page. And I got this note from
@heikkil: <a href="http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/">Note taking 3: Notes from elfeed entries - Heikki @ home</a>. This
solution can do the trick for me, but this is not what I want.
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">The ideal way</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
Then I spent 30 minutes to improve his codes. And I got this based on <a href="http://orgmode.org/manual/Adding-hyperlink-types.html">Adding
hyperlink types - The Org Manual</a>:
</p>

<div class="org-src-container">

<pre class="src src-elisp">;; ---------------------
;; org capture in elfeed
;; ---------------------
(defun private/org-elfeed-entry-store-link ()
  (when elfeed-show-entry
    (let* ((link (elfeed-entry-link elfeed-show-entry))
           (title (elfeed-entry-title elfeed-show-entry)))
      (org-store-link-props
       :link link
       :description title)
      )))

(add-hook 'org-store-link-functions
          'private/org-elfeed-entry-store-link)
</pre>
</div>

<p>
After adding this hook, I can now use a template like this to capture what I
am reading in elfeed to an org-mode entry in my refile.org file:
</p>

<div class="org-src-container">

<pre class="src src-elisp">(setq org-capture-templates
          '(("l" "Link" entry
             (file "~/Org/refile.org")
             "* %a\n%U")
            ))
</pre>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-01-28</pubDate>
      <guid>http://dsdshcym.github.io/blog/2016/01/28/add-org-store-link-entry-for-elfeed</guid>
    </item>
    <item>
      <title>My 2015 Review</title>
      <link>http://dsdshcym.github.io/blog/2016/01/15/my-2015-review</link>
      <description><![CDATA[<div>
<div class="post">
<h1>My 2015 Review</h1>
<p>
2015 已经过去半个月了，在此我也对过去的一年作个小结，也算对 2016 作个规划，不知
年末回头看看能有多少完成的。
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Spacemacs</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
2015 年最明智的就是跳了 Spacemacs 的坑，让我转入了 Emacs 邪教，并最终成为了我转
投 Arch Linux 的导火索。以至于找实习时都说出了 "I just want to find a job I can
do all the coding staffs under command line" 这样的话。
</p>

<p>
一年过后，我在 Spacemacs 下的 Work Flow 也逐渐稳定，然而代码并没有写多少。一天做
得最多的就是用 Org 做笔记， mu4e 查邮件， elfeed 刷 RSS 。希望新的一年能好好写代
码，更好地把 Org-mode 融入到生活里去。
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">实习</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
老是因为偷懒没有找实习，结果好不容易找到一个待遇很好， Leader Title 又很牛逼的实
习又因为投资人撤资而作罢了。
</p>

<p>
在 EIA 的经历又让我觉得创业太不靠谱（或者是自己太水，无法凭技术让团队出彩），还
是加入一家大公司好好学习比较好吧。
</p>

<p>
希望新的一年能过掉 Google 面试，加入 Google 实习。
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">代码</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
回头看看，一年里也就学了 Django, Ruby, Rails, Elisp ，然而都只是皮毛， Ruby 算是
略有深入，然而代码量依然捉急。 Elisp 也只是能简单调试的地步。在写简历的时候甚至
发现自己几乎没有拿得出手的项目。
</p>

<p>
新的一年要好好研究 Python 和 Ruby 了。至少也得有一个能写在简历上大书特书一番的项
目。
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">学业</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
每次想要翘课都会因为怕老师点名而去（也和自己没啥项目写有关），最终在课上却各种水，
结果效果比翘课还差。虽然有时能用 Org 作笔记强迫自己专心，但是作的笔记后面也没什
么大的用处（除了锻炼了五笔）。身为一只「大四狗」还做不到翘课随心，深感有愧。
</p>

<p>
导致每次考试前都在紧张怕挂科，然而依然不好好复习，甚至装 Arch 作死。幸好最后结果
都还不错。
</p>

<p>
下学期要好好翘水课写代码。
</p>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">Arch</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
在 2015 年的最后两天跳入了 Arch Linux 的坑，感觉找到了真正适合自己的操作系统，希
望毕业以后能换一台对 Linux 支持得更好的 Laptop 吧，毕竟 Mac 上的 Linux 还是有某
几个细节不完美的。当然如果 Emacs 25 出来后（在 Mac 上的性能更好），并且 OS X 能
有不错的 Tiling Window Manager 的话（虽然并不可能），还是可以考虑回归 OS X 的。
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-01-15</pubDate>
      <guid>http://dsdshcym.github.io/blog/2016/01/15/my-2015-review</guid>
    </item>
    <item>
      <title>Why did I switch to Arch Linux</title>
      <link>http://dsdshcym.github.io/blog/2016/01/14/why-did-i-switch-to-arch-linux</link>
      <description><![CDATA[Why did I switch to Arch Linux and not use OS X anymore]]></description>
      <pubDate>2016-01-15</pubDate>
      <guid>http://dsdshcym.github.io/blog/2016/01/14/why-did-i-switch-to-arch-linux</guid>
    </item>
    <item>
      <title>How To Use OS X With Keyboard Only</title>
      <link>http://dsdshcym.github.io/blog/2015/12/19/how-to-use-os-x-with-keyboard-only</link>
      <description><![CDATA[How Do I Use OS X With My Keyboard Only]]></description>
      <pubDate>2015-12-19</pubDate>
      <guid>http://dsdshcym.github.io/blog/2015/12/19/how-to-use-os-x-with-keyboard-only</guid>
    </item>
    <item>
      <title>A Simple Introduction to Docker IX</title>
      <link>http://dsdshcym.github.io/blog/2015/12/11/a-simple-introduction-to-docker-ix</link>
      <description><![CDATA[<div>
<div class="post">
<h1>A Simple Introduction to Docker IX</h1>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">What are some concerns about using docker?</h2>
<div class="outline-text-2" id="text-orgheadline3">
</div><div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1">Security</h3>
<div class="outline-text-3" id="text-orgheadline1">
<ul class="org-ul">
<li><p>
Shared kernel concern
</p>

<p>
Since containers share the same kernel, if one of them panics, everyone of
them will panic too.
</p></li>

<li><p>
Privilege concern
</p>

<blockquote>
<p>
if a user or application has superuser privileges within the container, the
underlying operating system could, in theory, be cracked.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>
</blockquote>

<ul class="org-ul">
<li><p>
This concern will no longer be valid in a few months
</p>

<p>
Docker has been working on linux <code>user namespace</code> for a while now. And once
this feature is completed. Then we can build a docker container without root
privileges, and meanwhile in this container, we can still have enough
privileges for us to do our job.
</p></li>
</ul></li>

<li><p>
VM + Container
</p>

<p>
<a href="http://hyper.sh/">Hyper</a> is a chinese startup project to make a lightweight virtual machine based
on Docker images, which combines both advantages from container and VM.
</p>

<ul class="org-ul">
<li>Its containers are isolated by VM. So it is immune from the "shared kernel"
problem in containers.</li>
<li>It's almost as lightweight as a container. So it's way more fast than a VM.</li>
<li>Since it's a VM, you can choose your own kernel.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">Management Complexity</h3>
<div class="outline-text-3" id="text-orgheadline2">
<ul class="org-ul">
<li>DevOps needs to manage too many docker files.
<ul class="org-ul">
<li>Since in docker's world, we need to seperate each of our apps into a single
docker image.</li>
<li>We must keep our eyes on many different docker files.</li>
<li>This can be a problem when our project becomes so much big.</li>
<li>But in general you won't face this.</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="http://www.itworld.com/article/2915530/virtualization/containers-vs-virtual-machines-how-to-tell-which-is-the-right-choice-for-your-enterprise.html">Containers vs. virtual machines: How to tell which is the right choice for your enterprise | ITworld</a>
</p></div></div>


</div>
</div>
</div>
</div>]]></description>
      <pubDate>2015-12-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2015/12/11/a-simple-introduction-to-docker-ix</guid>
    </item>
    <item>
      <title>A Simple Introduction to Docker III</title>
      <link>http://dsdshcym.github.io/blog/2015/12/04/a-simple-introduction-to-docker-iii</link>
      <description><![CDATA[<div>
<div class="post">
<h1>A Simple Introduction to Docker III</h1>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7">What is Docker?</h2>
<div class="outline-text-2" id="text-orgheadline7">
</div><div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6">Underlying Techniques</h3>
<div class="outline-text-3" id="text-orgheadline6">
</div><div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1">What do we need to do to build a container?</h4>
<div class="outline-text-4" id="text-orgheadline1">
<ol class="org-ol">
<li><p>
Isolate every container
</p>

<p>
We need to isolate every container, which means make a process in a container
(which usualy only has one sigle process) think it is the only process on the
system.
</p>

<p>
To do that, we need to use a technique provided by linux kernel, named
<b>namespace</b>.
</p></li>

<li><p>
Restrict resources a container can use
</p>

<p>
We may need to restrict the resources a container can use since we don't want
to let them to eat up all our system resources such as CPU, RAM, Disks.
</p>

<p>
We may also need to account for the resources a container have used, for
charging or something else.
</p>

<p>
To do that, we need to use <b>cgroups</b> (abbreviated from <b>control groups</b>),
which is a linux kernel feature that limits, accounts for, and isolates the
resource usage of a collection of processes.
</p></li>

<li><p>
Provide these resources wisely
</p>

<p>
We may only have a couple of small, weak devices, but we want to provide
great services. We can use container to combine these devices into one single
device, at least it looks like one. So we can have enough resources we want.
And more importantly, it's scalable.
</p></li>
</ol>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-4">
<h4 id="orgheadline2">Linux Namespace</h4>
<div class="outline-text-4" id="text-orgheadline2">
<ul class="org-ul">
<li>Docker takes advantage of a technology called namespaces to provide the
isolated workspace<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup></li>
<li><p>
Purpose of Namespace
</p>

<p>
To wrap a particular global system resource in an <b>abstraction</b> that makes it
<b>appear to</b> the processes within the namespace that they have their own
<b>isolated</b> instance of the global resource.
</p></li>

<li><p>
6 namespaces
</p>

<p>
There are 6 different types of namespaces. Docker has used five of them, and
is working on the last one (user namespace).
</p>

<dl class="org-dl">
<dt>The pid namespace</dt><dd>Used for process isolation (PID: Process ID).</dd>
<dt>The net namespace</dt><dd>Used for managing network interfaces (NET: Networking).</dd>
<dt>The ipc namespace</dt><dd>Used for managing access to IPC resources (IPC: InterProcess Communication).</dd>
<dt>The mnt namespace</dt><dd>Used for managing mount-points (MNT: Mount).</dd>
<dt>The uts namespace</dt><dd>Used for isolating kernel and version identifiers. (UTS: Unix Timesharing System).</dd>
</dl></li>

<li>Related System Calls
<ul class="org-ul">
<li><p>
<code>clone()</code>
</p>

<p>
Create a new process. And can use different identifiers/flags to isolate
different resources.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Namespaces</td>
<td class="org-left">Identifier</td>
<td class="org-left">Usage</td>
<td class="org-left">Related Kernel Versions</td>
</tr>

<tr>
<td class="org-left">Mount namespaces</td>
<td class="org-left">CLONE_NEWNS</td>
<td class="org-left">Managing mount-points</td>
<td class="org-left">Since Linux 2.4.19</td>
</tr>

<tr>
<td class="org-left">UTS namespaces</td>
<td class="org-left">CLONE_NEWUTS</td>
<td class="org-left">Isolating kernel and version identifiers</td>
<td class="org-left">Since Linux 2.6.19</td>
</tr>

<tr>
<td class="org-left">IPC namespaces</td>
<td class="org-left">CLONE_NEWIPC</td>
<td class="org-left">Managing access to IPC resources</td>
<td class="org-left">Since Linux 2.6.19</td>
</tr>

<tr>
<td class="org-left">PID namespaces</td>
<td class="org-left">CLONE_NEWPID</td>
<td class="org-left">Process isolation</td>
<td class="org-left">Since Linux 2.6.24</td>
</tr>

<tr>
<td class="org-left">Network namespaces</td>
<td class="org-left">CLONE_NEWNET</td>
<td class="org-left">Managing network interfaces</td>
<td class="org-left">Started in Linux 2.6.24 and largely completed by about Linux 2.6.29</td>
</tr>

<tr>
<td class="org-left">User namespaces</td>
<td class="org-left">CLONE_NEWUSER</td>
<td class="org-left">Managing user and group ID</td>
<td class="org-left">Started in Linux 2.6.23 and completed in Linux 3.8</td>
</tr>
</tbody>
</table></li>

<li><p>
<code>unshare()</code>
</p>

<p>
Disassociate parts of a progress's execution context, such as the mount
namespace, that are currently being shared with other processes (or
threads).
</p></li>

<li><p>
<code>setns()</code>
</p>

<p>
Reassociate thread with a namespace
</p></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3">Control groups</h4>
<div class="outline-text-4" id="text-orgheadline3">
<blockquote>
<p>
Control groups allow Docker to share available hardware resources to containers
and, if required, set up limits and constraints.<sup><a id="fnr.1.100" class="footref" href="#fn.1">1</a></sup>
</p>
</blockquote>

<ul class="org-ul">
<li>Features
<ul class="org-ul">
<li>Resource limitation</li>
<li>Prioritization</li>
<li>Accounting</li>
<li>Control</li>
</ul></li>
<li>CPU Restrictions
<ul class="org-ul">
<li>Example

<ol class="org-ol">
<li>mount cgroups
<ul class="org-ul">
<li><p>
You can see your mounted cgroups using this command
</p>
<div class="org-src-container">

<pre class="src src-sh">mount -t cgroup
</pre>
</div>

<pre class="example">
systemd on /sys/fs/cgroup/systemd type cgroup (rw,noexec,nosuid,nodev,none,name=systemd)
cpuset on /sys/fs/cgroup/cpuset type cgroup (rw,cpuset)
cpu on /sys/fs/cgroup/cpu type cgroup (rw,cpu)
memory on /sys/fs/cgroup/memory type cgroup (rw,memory)
</pre></li>

<li><p>
If you can't see them, you can mount them by your self
</p>
<div class="org-src-container">

<pre class="src src-sh">sudo mkdir cgroup
sudo mount -t tmpfs cgroup_root ./cgroup
sudo mkdir cgroup/cpuset
sudo mount -t cgroup -ocpuset cpuset ./cgroup/cpuset/
sudo mkdir cgroup/cpu
sudo mount -t cgroup -ocpu cpu ./cgroup/cpu/
sudo mkdir cgroup/memory
sudo mount -t cgroup -omemory memory ./cgroup/memory/
</pre>
</div></li>

<li><p>
Then you can see config files under these directory
</p>
<div class="org-src-container">

<pre class="src src-sh">ls /sys/fs/cgroup/cpu /sys/fs/cgroup/cpuset/
</pre>
</div>

<pre class="example">
/sys/fs/cgroup/cpu:
cgroup.clone_children  cpu.cfs_period_us  cpu.shares       release_agent
cgroup.procs         cpu.cfs_quota_us   cpu.stat       tasks
cgroup.sane_behavior   cpu_group    notify_on_release

/sys/fs/cgroup/cpuset/:
cgroup.clone_children cpuset.memory_pressure_enabled
cgroup.procs    cpuset.memory_spread_page
cgroup.sane_behavior  cpuset.memory_spread_slab
cpuset.cpu_exclusive  cpuset.mems
cpuset.cpus   cpuset.sched_load_balance
cpuset.mem_exclusive  cpuset.sched_relax_domain_level
cpuset.mem_hardwall notify_on_release
cpuset.memory_migrate release_agent
cpuset.memory_pressure  tasks
</pre></li>
</ul></li>

<li><p>
Create a cpu group
</p>
<div class="org-src-container">

<pre class="src src-sh">mkdir /sys/fs/cgroup/cpu/temp
</pre>
</div></li>

<li>Running a process in a cpu group
<ul class="org-ul">
<li><p>
C program
</p>
<div class="org-src-container">

<pre class="src src-c">/* deadloop.c */
int main(void) {
    int i = 0;
    for(;;) i++;
    return 0;
}
</pre>
</div></li>
<li><p>
<code>top</code> results
</p>

<p>
We can see in the result table below that the CPU usage of this process
is almost 100%.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />

<col  class="org-left" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-left" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-right">PID</td>
<td class="org-left">USER</td>
<td class="org-right">PR</td>
<td class="org-right">NI</td>
<td class="org-right">VIRT</td>
<td class="org-right">RES</td>
<td class="org-right">SHR</td>
<td class="org-left">S</td>
<td class="org-right">%CPU</td>
<td class="org-right">%MEM</td>
<td class="org-right">TIME+</td>
<td class="org-left">COMMAND</td>
</tr>

<tr>
<td class="org-right">107539</td>
<td class="org-left">dsdshcym</td>
<td class="org-right">20</td>
<td class="org-right">0</td>
<td class="org-right">4196</td>
<td class="org-right">628</td>
<td class="org-right">548</td>
<td class="org-left">R</td>
<td class="org-right">99.8</td>
<td class="org-right">0.1</td>
<td class="org-right">0:09.80</td>
<td class="org-left">deadloop</td>
</tr>
</tbody>
</table></li>
<li>Restrict CPU usage
<ol class="org-ol">
<li><p>
Restrict a cgroup's CPU usage
</p>
<div class="org-src-container">

<pre class="src src-sh">cat /sys/fs/cgroup/cpu/temp/cpu.cfs_quota_us
echo 20000 &gt; /sys/fs/cgroup/cpu/temp/cpu.cfs_quota_us
cat /sys/fs/cgroup/cpu/temp/cpu.cfs_quota_us
</pre>
</div>

<pre class="example">
-1
25000
</pre></li>

<li><p>
Add the process to a cgroup
</p>
<div class="org-src-container">

<pre class="src src-sh"># Add the process's pid to the cgroup's tasks file
echo 107539 &gt;&gt; /sys/fs/cgroup/cpu/temp/tasks
</pre>
</div></li>
<li><p>
<code>top</code> results
</p>

<p>
As we can see in the results below, the CPU usage have dropped down
to about 20%, which was set by the value 20000 in the
<code>cpu.cfs_quota_us</code> file.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />

<col  class="org-left" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-left" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-right">PID</td>
<td class="org-left">USER</td>
<td class="org-right">PR</td>
<td class="org-right">NI</td>
<td class="org-right">VIRT</td>
<td class="org-right">RES</td>
<td class="org-right">SHR</td>
<td class="org-left">S</td>
<td class="org-right">%CPU</td>
<td class="org-right">%MEM</td>
<td class="org-right">TIME+</td>
<td class="org-left">COMMAND</td>
</tr>

<tr>
<td class="org-right">107539</td>
<td class="org-left">dsdshcym</td>
<td class="org-right">20</td>
<td class="org-right">0</td>
<td class="org-right">4196</td>
<td class="org-right">628</td>
<td class="org-right">548</td>
<td class="org-left">R</td>
<td class="org-right">19.9</td>
<td class="org-right">0.1</td>
<td class="org-right">1:25.30</td>
<td class="org-left">deadloop</td>
</tr>
</tbody>
</table></li>
</ol></li>
</ul></li>
</ol></li>
</ul></li>
<li>Memory Restrictions</li>
<li>IO Speed Restrictions</li>
<li>Disk Capacity Restrictions</li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4">Union File Systems</h4>
<div class="outline-text-4" id="text-orgheadline4">
<blockquote>
<p>
Docker uses union file systems to provide the building blocks for
containers.<sup><a id="fnr.1.100" class="footref" href="#fn.1">1</a></sup>
</p>
</blockquote>

<ul class="org-ul">
<li><p>
UFS
</p>

<p>
Unionfs is a filesystem service for Linux, FreeBSD and NetBSD which implements a
union mount for other file systems. It allows files and directories of separate
file systems, known as branches, to be transparently overlaid, forming a single
coherent file system. Contents of directories which have the same path within
the merged branches will be seen together in a single merged directory, within
the new, virtual filesystem.
</p></li>

<li><p>
Usage in docker
</p>

<p>
Each Docker image consists of a series of layers. Docker makes use of union
file systems to combine these layers into a single image.
</p></li>
</ul>
</div>

<ul class="org-ul"><li><a id="orgheadline5"></a>AUFS<br  /><div class="outline-text-5" id="text-orgheadline5">
<ul class="org-ul">
<li><p>
Prepare
</p>
<div class="org-src-container">

<pre class="src src-sh">tree
</pre>
</div>

<pre class="example">
.
|-- fruits
|   |-- apple
|   `-- tomato
`-- vegetables
    |-- carrots
    `-- tomato

2 directories, 4 files
</pre></li>

<li><p>
Mount
</p>
<div class="org-src-container">

<pre class="src src-sh">mkdir mnt
sudo mount -t aufs -o dirs=./fruits:./vegetables none ./mnt
tree ./mnt
</pre>
</div>

<pre class="example">
./mnt
|-- apple
|-- carrots
`-- tomato

0 directories, 3 files
</pre></li>

<li><p>
Modify
</p>
<div class="org-src-container">

<pre class="src src-sh">echo mnt_carrots &gt; ./mnt/carrots
</pre>
</div>

<ul class="org-ul">
<li><p>
results in vegetables
</p>

<div class="org-src-container">

<pre class="src src-sh">cat ./vegetables/carrots
</pre>
</div></li>

<li><p>
results in fruits
</p>

<div class="org-src-container">

<pre class="src src-sh">cat ./fruits/carrots
</pre>
</div>

<pre class="example">
mnt_carrots
</pre></li>
</ul></li>
</ul>
</div></li></ul>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="https://docs.docker.com/introduction/understanding-docker/#the-underlying-technology">The underlying technology of Docker</a>
</p></div></div>


</div>
</div>
</div>
</div>]]></description>
      <pubDate>2015-12-04</pubDate>
      <guid>http://dsdshcym.github.io/blog/2015/12/04/a-simple-introduction-to-docker-iii</guid>
    </item>
    <item>
      <title>A Simple Introduction to Docker II</title>
      <link>http://dsdshcym.github.io/blog/2015/11/26/a-simple-introduction-to-docker-ii</link>
      <description><![CDATA[<div>
<div class="post">
<h1>A Simple Introduction to Docker II</h1>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">What is Docker?</h2>
<div class="outline-text-2" id="text-orgheadline1">
<ul class="org-ul">
<li>Docker is a container implementation written in Go language.</li>
<li>It's the most popular container implementations nowadays.</li>
<li>It has the largest developer community out there,
which means you can find the best documentations here.</li>
</ul>

<p>
We now use docker as a example to illustrate how container works.
</p>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">Typical Use Cases</h3>
<div class="outline-text-3" id="text-orgheadline2">
<ul class="org-ul">
<li>Development Environments Configuration</li>
<li>Build Microservices</li>
<li>Distributed System
<ul class="org-ul">
<li><p>
Docker Swarm
</p>

<p>
Recently, Docker 1.9 was released. And a feature named Docker Swarm got out of
beta and is ready for production usages. We will give it a brief introduction
here.
</p></li>

<li>Swarm in general
<ul class="org-ul">
<li>Turns a set of Docker Engines into a single pool of resources</li>
<li>Supports the Docker RESTful API (99%)</li>
<li>Resource Management (CPU, Memory, Networking)</li>
<li>Advanced scheduling with constraints and affinities</li>
<li>Multiple Discovery Backends (hub, etcd, consul, zookeeper)</li>
<li>TLS: Encryption and Authentication</li>
<li>Multi Tenancy / Leader Election</li>
</ul></li>
<li>Usages
<ul class="org-ul">
<li>Build a overlay for a pool of Docker Engines</li>
<li>Combine thest Docker Engines into a single virtual Engine</li>
<li><p>
Use this engine as a normal Docker engine
</p>

<p>
Since they have almost the same API
</p></li>

<li>Provide distributed computing or data storage</li>
<li><p>
Swarm is ready for running production apps
</p>
<blockquote>
<p>
In Docker's tests, Swarm can run with 1,000 nodes and 30,000 containers on EC2
and it keeps on scheduling containers in less than half a second.
</p>
</blockquote></li>
</ul></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3">How popular is Docker?</h3>
<div class="outline-text-3" id="text-orgheadline3">
<p>
First of all, let's see how popular is docker nowadays.
</p>
</div>
<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4">A Quick Peek at Real Docker Adoption</h4>
<div class="outline-text-4" id="text-orgheadline4">
<p>
Here are the results of a survey from a monitoring startup Datadog.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<ul class="org-ul">
<li>Real Docker Adoption Is Up 5x in One Year</li>
<li>Docker Now Runs on 6% of the Hosts We Monitor</li>
<li>Larger Companies Are the Early Adopters</li>
<li>2/3 of Companies That Try Docker Adopt It</li>
<li>Users Triple the Number of Containers They Use within 5 Months</li>
<li>The Most Widely Used Images Are Registry, NGINX, and Redis</li>
<li>Docker Hosts Often Run  Four Containers at a Time</li>
<li>VMs Live 4x Longer Than Containers</li>
</ul>

<p>
From this survey, we can know that docker is growing really fast in the last
year. And it's widely used to provide web services.
</p>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-4">
<h4 id="orgheadline5">Real World Applications</h4>
<div class="outline-text-4" id="text-orgheadline5">
<ul class="org-ul">
<li>Used widely in productions
<ul class="org-ul">
<li><p>
Google
</p>
<blockquote>
<p>
Indeed, few of you know it, but most of you have been using containers for
years. Google has its own open-source, container technology
<a href="http://www.linuxplumbersconf.org/2013/ocw//system/presentations/1239/original/lmctfy%20(1).pdf">lmctfy (Let Me Contain That For You)</a>. Anytime you use some of Google
functionality — Search, Gmail, Google Docs, whatever — you're issued a new
container.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>
</p>
</blockquote></li>
<li>Baidu</li>
<li>Uber</li>
<li>PayPal</li>
</ul></li>
<li>Paas
<ul class="org-ul">
<li>IBM BlueMix<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup></li>
<li>Coding.net</li>
<li>Daocloud</li>
<li><a href="https://c.163.com/">网易蜂巢</a></li>
</ul></li>
<li>Personal projects using docker to diliver
<ul class="org-ul">
<li><a href="http://modo.moe/">http://modo.moe/</a></li>
<li>etc.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6">Docker can even run on ARM platforms</h4>
<div class="outline-text-4" id="text-orgheadline6">
<ul class="org-ul">
<li><a href="http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/">Getting started with Docker on your Raspberry Pi</a></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7">How to use Docker?</h3>
<div class="outline-text-3" id="text-orgheadline7">
<p>
Docker has a really good documentation. You can find almost anything you need to
know about how to use Docker at <a href="http://docs.docker.com/">Docker Docs</a>. Here, we will use a example from
this doc to show you some basic Docker commands.
</p>
</div>
<div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8">Using Docker in China</h4>
<div class="outline-text-4" id="text-orgheadline8">
<p>
I suggest to use a docker hub mirror in china to download docker images.
Otherwise you can hardly download an image file. You can find some information
about the docker hub mirror <a href="http://dockone.io/article/160">here</a>.
</p>
</div>
</div>
<div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9">Download and Run a Image</h4>
<div class="outline-text-4" id="text-orgheadline9">
<div class="org-src-container">

<pre class="src src-sh">docker run docker/whalesay cowsay foo bar
</pre>
</div>

<pre class="example">
 _________
&lt; foo bar &gt;
 ---------
     \
     \
       \
 #        .
 # ## ##       ==
 # ## ## ##      ===
       /""""""""""""""""___/ ===
   ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
       \______ o          __/
         \    \        __/
           \____\______/
</pre>
</div>
</div>
<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10">Build a Custom Image</h4>
<div class="outline-text-4" id="text-orgheadline10">
<ul class="org-ul">
<li>Dockerfile Docker can build images automatically by reading the instructions
from a <code>Dockerfile</code>, a text file that contains all the commands, in order,
needed to build a given image. You can read more about Dockerfile <a href="http://docs.docker.com/engine/reference/builder/">here</a>.
<ul class="org-ul">
<li><p>
Example
</p>
<div class="org-src-container">

<pre class="src src-dockerfile">FROM nginx
# RUN apt-get -y update &amp;&amp; apt-get install -y xxx
COPY *.html /usr/share/nginx/html/
</pre>
</div></li>
<li><p>
Build a image using Dockerfile
</p>
<div class="org-src-container">

<pre class="src src-sh">docker build -t nginx-test .
</pre>
</div></li>
<li><p>
Use this image
</p>
<div class="org-src-container">

<pre class="src src-sh">docker run --name simple_html -d -p 80:80 -p 443:443 nginx_test
</pre>
</div></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11">Bonus</h4>
<div class="outline-text-4" id="text-orgheadline11">
<ul class="org-ul">
<li><a href="https://github.com/docker/dockercraft">docker/dockercraft</a></li>
</ul>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="https://www.datadoghq.com/docker-adoption/">8 surprising facts about real Docker adoption - Datadog</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
<a href="http://www.zdnet.com/article/what-is-docker-and-why-is-it-so-darn-popular/">What is Docker and why is it so darn popular? | ZDNet</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
<a href="http://www.ibm.com/cloud-computing/bluemix/">IBM Bluemix - Create, Deploy, Manage Your Applications in the Cloud</a>
</p></div></div>


</div>
</div>
</div>
</div>]]></description>
      <pubDate>2015-11-26</pubDate>
      <guid>http://dsdshcym.github.io/blog/2015/11/26/a-simple-introduction-to-docker-ii</guid>
    </item>
    <item>
      <title>My Ideal Editor</title>
      <link>http://dsdshcym.github.io/blog/2015/11/20/my-ideal-editor</link>
      <description><![CDATA[A simple explaination of my ideal text editor]]></description>
      <pubDate>2015-11-20</pubDate>
      <guid>http://dsdshcym.github.io/blog/2015/11/20/my-ideal-editor</guid>
    </item>
    <item>
      <title>A Simple Introduction to Docker I</title>
      <link>http://dsdshcym.github.io/blog/2015/11/13/a-simple-introduction-to-docker-i</link>
      <description><![CDATA[<div>
<div class="post">
<h1>A Simple Introduction to Docker I</h1>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Why do we need Virtualization?</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
I believe everyone have used a virtual machine before. And I think you know how
convenient a virtual machine is under a personal usage sceanario. Here, we
mainly focus on the power of virtualization on the server side.
</p>
</div>
<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">Snapshots</h3>
<div class="outline-text-3" id="text-orgheadline2">
<p>
Imagine how much work you need to do to backup a physical machine.
</p>

<p>
A snapshot is the state of a virtual machine at an exact time point. You can
create a snapshot for a virtual machine in minutes.
</p>

<p>
We can use this snapshot as a <b>backup</b>. So that we can restore it on almost any
machine we want. This is a really useful backup technique.
</p>

<p>
Further more, it provides more convenience to <b>migrate</b> a virtual machine to
another host.
</p>
</div>
</div>
<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3">Isolation</h3>
<div class="outline-text-3" id="text-orgheadline3">
<p>
In the real world, we often isolate apps that we want to run to provide more
reliabilities. If an app fails, it won't cause any effect to any other apps,
except for some errors.
</p>

<p>
Imagine again, how many machines do you need to provide isolated apps for a
website.
</p>

<p>
In the virtualization world, you can just put these apps into several different
virtual machines.
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4">Cost/Energy Saving</h3>
<div class="outline-text-3" id="text-orgheadline4">
<p>
Since we can provide isolation via virtualization, we can use a single machine
to provide same functionality as hundreds physical machines thanks to the
powerful enough compute abilities a PC can provide nowadays.
</p>

<p>
Thus we can save our unneeded cost on these physical machines.
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">What's the Container?</h2>
<div class="outline-text-2" id="text-orgheadline5">
</div>
<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6">Operating-system-level virtualization</h3>
<div class="outline-text-3" id="text-orgheadline6">
<p>
Container, also called operating-system-level virtualization, is a
server-virtualization method where the kernel of an operating system allows
for multiple isolated user-space instances, instead of just one. Such
instances may look and feel like a real server from the point of view of its
owners and users.
</p>

<ul class="org-ul">
<li>Container is an instance of Operating-System-Level Virtualization</li>
<li>Docker and LXC are both implementations of Operating-System-Level
Virtualization</li>
</ul>
</div>
</div>
<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7">Compare with VM</h3>
<div class="outline-text-3" id="text-orgheadline7">
<p>
Basically, a container is way more lightweight than a virtual machine. Thus, it
can boot more quickly, use CPU and RAM more efficiently and have smaller image
size.
</p>

<ul class="org-ul">
<li><p>
Structure differences
</p>

<p>
We can show the structure differences using these two pictures:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Virtual Machine</td>
<td class="org-left">Container</td>
</tr>

<tr>
<td class="org-left"><img src="https://www.docker.com/sites/default/files/what-is-docker-diagram.png" alt="what-is-docker-diagram.png" /></td>
<td class="org-left"><img src="https://www.docker.com/sites/default/files/what-is-vm-diagram.png" alt="what-is-vm-diagram.png" /></td>
</tr>
</tbody>
</table></li>

<li><p>
Feature differences
</p>

<p>
We now illustrate the difference between a virtual machine and a container using
this table below:
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">Container</td>
<td class="org-left">VM</td>
</tr>

<tr>
<td class="org-left">Interfaces</td>
<td class="org-left">Directly Access</td>
<td class="org-left">Emulate</td>
</tr>

<tr>
<td class="org-left">OS</td>
<td class="org-left">Mainly Linux (Why?)</td>
<td class="org-left">Almost any OS</td>
</tr>

<tr>
<td class="org-left">Running Level</td>
<td class="org-left">Kernel level</td>
<td class="org-left">User level</td>
</tr>

<tr>
<td class="org-left">Isolation Strategy</td>
<td class="org-left">CGroups</td>
<td class="org-left">Hypervisor</td>
</tr>

<tr>
<td class="org-left">CPU Resources</td>
<td class="org-left">0-5%</td>
<td class="org-left">5-15%</td>
</tr>

<tr>
<td class="org-left">Boot Speed</td>
<td class="org-left">Seconds</td>
<td class="org-left">Minutes</td>
</tr>

<tr>
<td class="org-left">Image Sizes</td>
<td class="org-left">KB-MB</td>
<td class="org-left">GB-TB</td>
</tr>

<tr>
<td class="org-left">Cluster Sizes</td>
<td class="org-left">Over 10,000</td>
<td class="org-left">Hundreds</td>
</tr>

<tr>
<td class="org-left">HA (High Availability)</td>
<td class="org-left">Elastic Load, Dynamic Load</td>
<td class="org-left">Backup, Restore</td>
</tr>
</tbody>
</table></li>
</ul>
</div>
<div id="outline-container-orgheadline8" class="outline-4">
<h4 id="orgheadline8">Why can a container be so lightweight?</h4>
<div class="outline-text-4" id="text-orgheadline8">
<p>
Containers include the application and all of its dependencies, but share the
kernel with other containers. They run as an isolated process in userspace on
the host operating system. They're also not tied to any specific infrastructure
</p>

<p>
And because the kernel running in a container is the same as the hosts.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
You can run different Linux distributions in the container. Since they are using
the same kernel.
</p>

<p>
For virtual machines, they all includes the application, the necessary binaries
and libraries and an entire guest operating system - all of which may be tens of
GBs in size.
</p>
</div>
</div>
</div>
<div id="outline-container-orgheadline12" class="outline-3">
<h3 id="orgheadline12">How does container help you build better software?</h3>
<div class="outline-text-3" id="text-orgheadline12">
</div><div id="outline-container-orgheadline9" class="outline-4">
<h4 id="orgheadline9">Eliminate Environment Inconsistencies</h4>
<div class="outline-text-4" id="text-orgheadline9">
<p>
You can package your container into one little config file. And it can run on
another machine as the way you want it to. So you don't need to spend extra time
to install package A, B, C, D... in your test machine or even working machine.
</p>
</div>
</div>
<div id="outline-container-orgheadline10" class="outline-4">
<h4 id="orgheadline10">Accelerate Developer Onboarding</h4>
<div class="outline-text-4" id="text-orgheadline10">
<p>
You can just give your new partner a container config file. And he can run it on
his machine without any problems. Then he can start to work. It just works.
</p>
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-4">
<h4 id="orgheadline11">Empower Developer Creativity</h4>
<div class="outline-text-4" id="text-orgheadline11">
<p>
You don't need to worry about what language you should use. You can use any
language you want in a container, as long as you provide a simple API through
this container. And this will not cause any conflicts.
</p>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="http://stackoverflow.com/questions/25444099/why-docker-has-ability-to-run-different-linux-distribution">Why docker has ability to run different linux distribution? - Stack Overflow</a>
</p></div></div>


</div>
</div>
</div>
</div>]]></description>
      <pubDate>2015-11-13</pubDate>
      <guid>http://dsdshcym.github.io/blog/2015/11/13/a-simple-introduction-to-docker-i</guid>
    </item>
    <item>
      <title>Emacs 25 compiled file conflicts with Emacs 24</title>
      <link>http://dsdshcym.github.io/blog/2015/11/06/emacs-25-compiled-file-conflicts-with-emacs-24</link>
      <description><![CDATA[Don't use multiple versions of Emacs on the same machine]]></description>
      <pubDate>2015-11-06</pubDate>
      <guid>http://dsdshcym.github.io/blog/2015/11/06/emacs-25-compiled-file-conflicts-with-emacs-24</guid>
    </item>
  </channel>
</rss>