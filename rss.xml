<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Mon, 27 May 2019 20:37:44 CST</pubDate>
    <lastBuildDate>Mon, 27 May 2019 20:37:44 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>My GTD Workflow (2019 ver.)</title>
      <link>http://dsdshcym.github.io/blog/2019/05/22/my-gtd-workflow-2019-ver</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-25</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/22/my-gtd-workflow-2019-ver</guid>
    </item>
    <item>
      <title>The Modular Monolith: Elixir Architecture</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/24/the-modular-monolith-elixir-architecture</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>The Modular Monolith: Elixir Architecture</h1>
            <p>
There has been a hype about microservices: <i>start every project with a
microservice structure</i>! But I always believe we should build a well
organized monolith first, then consider extracting submodules into
microservices one by one. And there are some people who think the same
(or I learned this idea from them).
</p>

<p>
First, I was quite curious about how to build a modular monolith with
Ruby on Rails due to my Rails background. I found this article which
gives a great answer:
</p>
<blockquote>
<ul class="org-ul">
<li>First focus on making our app modular
<ul class="org-ul">
<li>Our goal was to <b>identify good architectural boundaries before we
extracted code out into independent services</b></li>
<li>This would set us up to be able to migrate to microservices in the
future, by having the code structured in a way to make a smooth
transition.</li>
</ul></li>
<li>Effectively, we're using a monorepo.
<ul class="org-ul">
<li><p>
We don't have an <code>app/</code> directory in our Rails project. All of our
code is either in <code>gems/</code> or <code>engines/</code>.
</p>
<div class="org-src-container">
<pre class="src src-ruby">Dir.glob(File.expand_path("../engines/*", __FILE__)).each do |path|
  gem File.basename(path), :path =&gt; path
end

Dir.glob(File.expand_path("../gems/*", __FILE__)).each do |path|
  gem File.basename(path), :path =&gt; path
end
</pre>
</div></li>
<li>First Steps Towards Implementing a Modular Monolith
<ul class="org-ul">
<li><p>
A great place to start (three engines)
</p>
<pre class="example">
+----------+      +------------+
|  Admin   |      |    API     |
+--+-------+      +---------+--+
   |                        |
   |                        |
   |     +-------------+    |
   +---&gt; |   Domain    | &lt;--+
         +-------------+
</pre>
<ol class="org-ol">
<li>Admin</li>
<li>API</li>
<li>Domain</li>
</ol></li>
<li>breaking up the domain logic</li>
<li>putting third-party dependencies in context</li>
</ul></li>
</ul></li>
</ul>
</blockquote>
<p>
-- from <a href="https://medium.com/@dan_manges/the-modular-monolith-rails-architecture-fb1023826fc4">The Modular Monolith: Rails Architecture – Dan Manges – Medium</a>
</p>

<p>
But this article reminds me more of Elixir than Rails. Here is why:
</p>
<ol class="org-ol">
<li>Using relative path to extract code as <code>gems</code> into separate
directories is almost the same as the way Elixir organize Umbrella
apps.</li>
<li>Breaking up the domain logic into three <code>gems=/=apps</code> (like Admin,
API, Domain) is a typical use case for Umbrella apps.</li>
</ol>

<p>
If you want to learn more about Umbrella apps, you can check the
<a href="https://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-projects.html">official documents</a>. And I also explained <a href="http://dsdshcym.github.io/clipping/2018/03/21/elixir-erlang-provide-a-great-way-to-develop-incrementally/">how to build an Elixir app
from a monolith to a microservice</a> before. Hopefully this can help you
somehow. :)
</p>

    </div>
</section>
]]></description>
      <pubDate>2019-05-25</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/24/the-modular-monolith-elixir-architecture</guid>
    </item>
    <item>
      <title>Defining a MVP by Setting OKRs</title>
      <link>http://dsdshcym.github.io/blog/2019/05/16/defining-a-mvp-by-setting-okrs</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-21</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/16/defining-a-mvp-by-setting-okrs</guid>
    </item>
    <item>
      <title>Set Restrictions to Make People Restrictionless</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/16/set-restrictions-to-make-people-restrictionless</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-17</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/16/set-restrictions-to-make-people-restrictionless</guid>
    </item>
    <item>
      <title>Why Do We Need a Plan?</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/15/why-do-we-need-a-plan</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-16</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/15/why-do-we-need-a-plan</guid>
    </item>
    <item>
      <title>Book Review: A Philosophy of Software Design</title>
      <link>http://dsdshcym.github.io/blog/2019/05/14/book-review-a-philosophy-of-software-design</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-15</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/14/book-review-a-philosophy-of-software-design</guid>
    </item>
    <item>
      <title>才华不够</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/13/才华不够</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-14</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/13/才华不够</guid>
    </item>
    <item>
      <title>How to build a Minimum CMS in an Agile way</title>
      <link>http://dsdshcym.github.io/blog/2019/05/11/how-to-build-a-minimum-cms-in-an-agile-way</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-11</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/11/how-to-build-a-minimum-cms-in-an-agile-way</guid>
    </item>
    <item>
      <title>Asking the Right Question</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/11/asking-the-right-question</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-11</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/11/asking-the-right-question</guid>
    </item>
    <item>
      <title>Clippings of 2019 Apr</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/09/clippings-of-2019-apr</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-10</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/09/clippings-of-2019-apr</guid>
    </item>
  </channel>
</rss>