<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Tue, 27 Feb 2018 18:13:02 CST</pubDate>
    <lastBuildDate>Tue, 27 Feb 2018 18:13:02 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Book Review: Fearless Rails Refactoring</title>
      <link>http://dsdshcym.github.io/blog/2018/02/27/book-review-fearless-rails-refactoring</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Book Review: Fearless Rails Refactoring</h1>
            <p>
This is my short review of the book <i><a href="http://rails-refactoring.com/">Fearless Rails Refactoring</a></i>, you can also
check my notes taken from it here: <a href="http://dsdshcym.github.io/clipping/2018/02/11/clippings-from-fearless-rails-refactoring/">Clippings from Fearless Rails Refactoring -
dsdshome</a>.
</p>

<div id="outline-container-org6d78b90" class="outline-2">
<h2 id="org6d78b90">It's all about Single Responsibility</h2>
<div class="outline-text-2" id="text-org6d78b90">
<p>
When I first started working as a Rails developer, a senior developer told me
this idea of Service Object (and also Form Object, Query Object). And I was
really really confusing about it. I spent a lot of time searching for this
name<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> and got few tutorials about it (apparently, it's not in the official
guidelines).
</p>

<p>
After about a year of struggling, I think I finally understand it now:
<b>Service Object</b> is just <i>Pure Old Ruby Object</i> (PORO).
</p>
<ul class="org-ul">
<li>Put and only put your model related logic in your <code>ActiveRecord</code> classes</li>
<li>Put and only put your request related logic in your <code>ActionController</code> classes</li>
<li>Put everything else in pure old ruby objects (service objects, form objects,
you name it)</li>
</ul>

<p>
From this pattern, we can also see that the idea of Service Object is actually
only about Single Responsibility Principle (SRP).
</p>
<ul class="org-ul">
<li>You need to define your class's responsibility.</li>
<li>No matter if it's inherited from <code>ActiveRecord</code> or <code>ActionController</code>, this
inheritance is just an implementation detail.</li>
</ul>

<p>
And I think this book explained this idea pretty well. This book also provides
many real-world examples to help your understand this idea better.
</p>

<p>
Although I think some of the examples can still be refactored, it's still a
great book about Service Object.
</p>

<p>
If you are like me (one-year-ago), wondering what's Service Object and how to
write them, please do read this book.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Here is what I got:
</p>
<ul class="org-ul">
<li><a href="https://ruby-china.org/topics/23892">Service Object 整理和小结 · Ruby China</a></li>
<li><a href="http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html">Gourmet Service Objects</a></li>
<li><a href="https://www.netguru.co/blog/service-objects-in-rails-will-help">Service objects in Rails will help you design clean and maintainable code. Here's how.</a></li>
<li><a href="https://blog.pivotal.io/pivotal-labs/labs/object-oriented-rails-writing-better-controllers">Object Oriented Rails – Writing better controllers - Pivotal</a></li>
</ul></div></div>


</div>
</div>
    </div>
</section>
]]></description>
      <pubDate>2018-02-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/02/27/book-review-fearless-rails-refactoring</guid>
    </item>
    <item>
      <title>Clippings from Extreme Programming Explained</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-26</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</guid>
    </item>
    <item>
      <title>Book Review: Smalltalk Best Practice Patterns</title>
      <link>http://dsdshcym.github.io/blog/2018/02/24/book-review-smalltalk-best-practice-patterns</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-24</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/02/24/book-review-smalltalk-best-practice-patterns</guid>
    </item>
    <item>
      <title>Globals don&#39;t need to be just variables</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/21/globals-don&#39;t-need-to-be-just-variables</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-21</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/21/globals-don&#39;t-need-to-be-just-variables</guid>
    </item>
    <item>
      <title>My 2017 Review</title>
      <link>http://dsdshcym.github.io/blog/2018/02/17/my-2017-review</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-19</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/02/17/my-2017-review</guid>
    </item>
    <item>
      <title>Tech Debts and Financial Debts</title>
      <link>http://dsdshcym.github.io/blog/2018/02/12/tech-debts-and-financial-debts</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-12</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/02/12/tech-debts-and-financial-debts</guid>
    </item>
    <item>
      <title>Clippings from Fearless Rails Refactoring</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/11/clippings-from-fearless-rails-refactoring</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-11</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/11/clippings-from-fearless-rails-refactoring</guid>
    </item>
    <item>
      <title>Clippings from Smalltalk Best Practice Patterns</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/10/clippings-from-smalltalk-best-practice-patterns</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-10</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/10/clippings-from-smalltalk-best-practice-patterns</guid>
    </item>
    <item>
      <title>Adding more code is a code smell</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/08/adding-more-code-is-a-code-smell</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-08</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/08/adding-more-code-is-a-code-smell</guid>
    </item>
    <item>
      <title>You may implicitly and strongly believe something wrong</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/08/you_may_implicitly_and_strongly_believe_something_wrong</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-02-08</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/08/you_may_implicitly_and_strongly_believe_something_wrong</guid>
    </item>
  </channel>
</rss>