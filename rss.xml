<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Fri, 08 Dec 2017 11:06:23 CST</pubDate>
    <lastBuildDate>Fri, 08 Dec 2017 11:06:23 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Add STI to a Legacy ActiveRecord Model</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/add-sti-to-a-legacy-activerecord-model</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Add STI to a Legacy ActiveRecord Model</h1>
            <p>
Recently, I need to add STI (Single Table Inheritance<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>) to a
long-existing table.
</p>

<p>
This table already uses a column (<code>token_type</code>) to distinguish between
two different types of data. And <code>token_type</code> can only be either <code>ios</code>
(for <code>IosDevice</code>) or <code>android</code> (for <code>AndroidDevice</code>).
</p>

<p>
I thought this would be a simple task but I could found few
resources about how to do it. So I'll explain how I did this in this
post.
</p>

<div id="outline-container-org7a35ee3" class="outline-2">
<h2 id="org7a35ee3">Set <code>inheritance_column</code></h2>
<div class="outline-text-2" id="text-org7a35ee3">
<p>
To change the column STI uses, we need to set <code>inheritance_column</code> in
our Base Model like this:
</p>
<div class="org-src-container">
<pre class="src src-ruby">class Device::Base &lt; ActiveRecord::Base
  self.inheritance_column = 'token_type'
end
</pre>
</div>

<p>
This behavior is already documented in <code>ActiveRecord</code>'s <a href="http://api.rubyonrails.org/classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column">documentation</a>:
</p>
<blockquote>
<p>
Defines the name of the table column which will store the class name
on single-table inheritance situations.
</p>

<p>
The default inheritance column name is type, which means it's a
reserved word inside Active Record. To be able to use single-table
inheritance with another column name, or to use the column type in
your own model for something else, you can set inheritance_column:
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org4227fa3" class="outline-2">
<h2 id="org4227fa3">Hack How ActiveRecord Finds the Sub-classes</h2>
<div class="outline-text-2" id="text-org4227fa3">
<p>
Then comes the most important part of our solution. We need to make
<code>ActiveRecord</code> finds our sub-class based on the existing value
</p>
<ul class="org-ul">
<li><code>ios</code> -&gt; <code>IosDevice</code></li>
<li><code>android</code> -&gt; <code>AndroidDevice</code></li>
</ul>

<p>
After reading <code>ActiveRecord</code>'s <a href="https://github.com/rails/rails/blob/633e9745f8eafb0d1d5523ec761fdee420bcbc91/activerecord/lib/active_record/inheritance.rb#L188">source code</a>, we need to follow these
steps:
</p>
<ol class="org-ol">
<li><p>
Overwriting <code>self.find_sti_class</code> method in the base model:
</p>
<div class="org-src-container">
<pre class="src src-ruby">class Device::Base &lt; ActiveRecord::Base
  def self.find_sti_class(type_name)
    super("Device::#{type_name.classify}Device")
  end
end
</pre>
</div>

<ul class="org-ul">
<li>Originally, <code>find_sti_class</code> was expecting some <code>type_name</code> more
like a class name (e.g. <code>Device::AndroidDevice</code>)</li>
<li>Using our hacker, we can still find <code>Device::AndroidDevice</code> even
if the type value is <code>android</code></li>
</ul></li>
<li><p>
Setting <code>store_full_sti_class</code> to <code>false</code> in sub-classes (Optional)
</p>
<div class="org-src-container">
<pre class="src src-ruby">class Device::AndroidDevice &lt; Device::Base
  self.store_full_sti_class = false
end
</pre>
</div>
<ul class="org-ul">
<li><code>store_full_sti_class</code> is a <code>class_attribute</code> in
<code>ActiveRecord::Inheritance</code></li>
<li>Setting it to <code>false</code> means that we are not storing the full
class name in the type column</li>
<li>But actually we don't need to do this because we've already
extend it to the full class name in <code>find_sti_class</code></li>
</ul></li>
<li><p>
Setting <code>sti_name</code> for sub-classes
</p>
<div class="org-src-container">
<pre class="src src-ruby">class Device::AndroidDevice &lt; Device::Base
  def self.sti_name
    'android'
  end
end
</pre>
</div>
<ul class="org-ul">
<li>This <code>sti_name</code> will be used to construct <a href="https://github.com/rails/rails/blob/633e9745f8eafb0d1d5523ec761fdee420bcbc91/activerecord/lib/active_record/inheritance.rb#L209"><code>type_condition</code></a></li>
<li>Then <code>type_condition</code> will be used in
<a href="https://github.com/rails/rails/blob/eeaf9cf61c3cd14929583878785c31dab79e2196/activerecord/lib/active_record/core.rb#L279-L280"><code>ActiveRecord::Core#relation</code></a> to add constraints on
<code>inheritance_column</code> when querying</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org6396656" class="outline-2">
<h2 id="org6396656">Caveats</h2>
<div class="outline-text-2" id="text-org6396656">
<p>
There are some caveats for using this hack. (That's why it's called a
hack and there are few resources introducing this.)
</p>

<ol class="org-ol">
<li><code>find_sti_class</code> is a private method
<ul class="org-ul">
<li>Which means it might be changed or even removed in the future</li>
<li>This possibility makes our hack pretty unstable</li>
<li>Fortunately, we are just calling super and giving it a different
input.</li>
<li>So that, as long as this method is not removed and it's still
used to find a class to initialize the <code>ActiveRecord</code> object,
this hack will continue to work.</li>
</ul></li>
<li><b><code>sti_name</code> is also a private method</b>
<ul class="org-ul">
<li>It's more unstable than <code>find_sti_class</code> because it's used in a
place far from <code>ActiveRecord::Inheritance</code> and is more possible
to be changed</li>
<li>More importantly, we are overwriting the whole method instead of
calling <code>super</code>, which means we will very likely break this code
in a future upgrade</li>
</ul></li>
<li><code>token_type</code> is doing more than one thing
<ul class="org-ul">
<li>The reason I wanted to use <code>token_type</code> as the
<code>inheritance_column</code> was that we've already been using it to
distinguish <code>iOS</code> devices and <code>Android</code> devices.</li>
<li>But still, after we add the responsibility of finding the STI
class for this column. It's doing more than one thing.</li>
<li>If we need to change the original values of <code>token_type</code>, it will
affect the STI mechanism for these classes.</li>
<li>It's definitely better to use a separate <code>type</code> column for STI.
(Or remove the old responsibility to make it only responsible for
STI)</li>
<li>Again, fortunately, both <code>token_type</code> (<code>ios</code> and <code>android</code>) are
both stable enough and won't be changed in any foreseeable
future.</li>
</ul></li>
</ol>

<p>
So, think about these trade-offs before you try out my hack to STI.
(I've made the decision to use this because I'm willing to take this
risk for the convenience this quick STI hack brings to the project)
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="https://martinfowler.com/eaaCatalog/singleTableInheritance.html">P of EAA: Single Table Inheritance</a>
</p></div></div>


</div>
</div>
    </div>
</section>
]]></description>
      <pubDate>2017-12-08</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/add-sti-to-a-legacy-activerecord-model</guid>
    </item>
    <item>
      <title>给小白解释「面向对象」（问答体）</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/explain-OOP-to-a-novice</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-07</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/explain-OOP-to-a-novice</guid>
    </item>
    <item>
      <title>CRDT is used in both Teletype for Atom and Phoenix</title>
      <link>http://dsdshcym.github.io/blog/2017/12/07/crdt-is-used-in-both-teletype-for-atom-and-phoenix</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-07</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/07/crdt-is-used-in-both-teletype-for-atom-and-phoenix</guid>
    </item>
    <item>
      <title>How to write deliberately unmaintainable code?</title>
      <link>http://dsdshcym.github.io/blog/2017/12/05/how-to-write-deliberately-unmaintainable-code</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-05</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/05/how-to-write-deliberately-unmaintainable-code</guid>
    </item>
    <item>
      <title>人生的意义</title>
      <link>http://dsdshcym.github.io/blog/2017/12/05/meaning-of-life</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-05</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/05/meaning-of-life</guid>
    </item>
    <item>
      <title>Write Custom RSpec Matchers to Simplify Your Specs</title>
      <link>http://dsdshcym.github.io/blog/2017/12/01/write-custom-rspec-matchers-to-simplify-your-specs</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-12-01</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/01/write-custom-rspec-matchers-to-simplify-your-specs</guid>
    </item>
    <item>
      <title>AWS Lambda is what Microservices should be like</title>
      <link>http://dsdshcym.github.io/blog/2017/11/28/aws-lambda-is-what-microservices-should-be-like</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-11-29</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/11/28/aws-lambda-is-what-microservices-should-be-like</guid>
    </item>
    <item>
      <title>Retrospect on Image Processing Using AWS Lambda</title>
      <link>http://dsdshcym.github.io/blog/2017/11/24/retrospect-on-image-processing-using-aws-lambda</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-11-24</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/11/24/retrospect-on-image-processing-using-aws-lambda</guid>
    </item>
    <item>
      <title>Sony WH-1000XM2 Review</title>
      <link>http://dsdshcym.github.io/blog/2017/11/16/sony-wh-1000xm2-review</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-11-22</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/11/16/sony-wh-1000xm2-review</guid>
    </item>
    <item>
      <title>Safari 11 CJK 伪粗体问题</title>
      <link>http://dsdshcym.github.io/blog/2017/11/17/safari-11-bold-cjk-font-issue</link>
      <description><![CDATA[]]></description>
      <pubDate>2017-11-20</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/11/17/safari-11-bold-cjk-font-issue</guid>
    </item>
  </channel>
</rss>