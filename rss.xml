<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Thu, 03 Jan 2019 22:13:10 CST</pubDate>
    <lastBuildDate>Thu, 03 Jan 2019 22:13:10 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>How to pattern match a function in Elixir</title>
      <link>http://dsdshcym.github.io/blog/2019/01/03/how-to-pattern-match-a-function-in-elixir</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>How to pattern match a function in Elixir</h1>
            <p>
I ran into this problem of pattern matching a function when using
<a href="https://github.com/plataformatec/mox">mox</a>. I wanted to check that a function is injected into another
function as a dependency. Here is a simplified example:
</p>
<div class="org-src-container">
<pre class="src src-elixir">test "calls Dependency.do_something with AnotherModule.function/1" do
  Mox.expect(DependencyMock, :do_something, fn ^(&amp;AnotherModule.function/1) -&gt; nil end)

  Module.call()

  Mox.verify!()
end
</pre>
</div>

<p>
But this code doesn't work in Elixir:
</p>
<pre class="example">
(CompileError) invalid argument for unary operator ^, expected an existing variable, got: ^(&amp;AnotherModule.function/1)
</pre>

<p>
After some research, I found how to do this correctly in Elixir:
<a href="https://github.com/elixir-lang/elixir/issues/5649#issuecomment-272259876">Improve error messages for invalid expression in match · Issue #5649 ·
elixir-lang/elixir</a>
</p>
<div class="org-src-container">
<pre class="src src-elixir">x = &amp;List.first/1
case &amp;List.first/1 do
  ^x -&gt; true
end
</pre>
</div>

<p>
So my use case only needs a small fix:
</p>
<div class="org-src-container">
<pre class="src src-elixir">test "calls Dependency.do_something with AnotherModule.function/1" do
  expected_fun = &amp;AnotherModule.function/1
  Mox.expect(DependencyMock, :do_something, fn ^expected_fun -&gt; nil end)

  Module.call()

  Mox.verify!()
end
</pre>
</div>

<p>
One caveat is that it doesn't work for anonymous functions even if
they have the same body and arity. Because they are completely
unrelated and Elixir doesn't know how to check if they can match:
</p>
<div class="org-src-container">
<pre class="src src-elixir">fun1 = fn _ -&gt; nil end
fun2 = fn _ -&gt; nil end

case fun2 do
  ^fun1 -&gt; true
  _ -&gt; false
end
</pre>
</div>

<pre class="example">
false
</pre>


<p>
Pattern matching is a really useful feature in functional
languages. But Elixir's implementation does have some unexpected
behaviour. For example:
</p>
<ul class="org-ul">
<li>Pattern match functions like explained above</li>
<li><p>
Pattern match an empty map <code>%{}</code>
</p>
<div class="org-src-container">
<pre class="src src-elixir">empty = %{}
case %{} do
  ^empty -&gt; true
end
</pre>
</div>

<pre class="example">
true
</pre></li>
<li><p>
Pattern match a pid
</p>
<div class="org-src-container">
<pre class="src src-elixir">pid = self()
case self() do
  ^pid -&gt; true
end
</pre>
</div>

<pre class="example">
true
</pre></li>
</ul>

<p>
I guess we need to get used to them for quite some time, because as
José Valim explained in that issue: "There is very little interest in
making functions valid patterns in Elixir."
</p>

    </div>
</section>
]]></description>
      <pubDate>2019-01-03</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/01/03/how-to-pattern-match-a-function-in-elixir</guid>
    </item>
    <item>
      <title>My Monthly Best Reads (2018 Dec)</title>
      <link>http://dsdshcym.github.io/clipping/2019/01/02/my-monthly-best-reads-2018-dec</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-01-02</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/01/02/my-monthly-best-reads-2018-dec</guid>
    </item>
    <item>
      <title>Write Tests to Justify Your Design Decisions</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/25/write-tests-to-justify-your-design-decisions</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-26</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/25/write-tests-to-justify-your-design-decisions</guid>
    </item>
    <item>
      <title>No Code is Better Than No-Code</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-24</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</guid>
    </item>
    <item>
      <title>The Point of A Degree</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-13</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</guid>
    </item>
    <item>
      <title>Shall we test our Router?</title>
      <link>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-06</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</guid>
    </item>
    <item>
      <title>$handle_undefined_function in Elixir/Erlang</title>
      <link>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</guid>
    </item>
    <item>
      <title>Similarities between TDD and Management</title>
      <link>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</guid>
    </item>
    <item>
      <title>Don&#39;t Repeat Your Domain Knowledge</title>
      <link>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-10-26</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</guid>
    </item>
    <item>
      <title>Clippings from Domain-Driven Design</title>
      <link>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</guid>
    </item>
  </channel>
</rss>