<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Wed, 26 Dec 2018 07:06:28 CST</pubDate>
    <lastBuildDate>Wed, 26 Dec 2018 07:06:28 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Write Tests to Justify Your Design Decisions</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/25/write-tests-to-justify-your-design-decisions</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Write Tests to Justify Your Design Decisions</h1>
            <blockquote>
<ul class="org-ul">
<li><b>Write tests to justify your design decisions</b>
<ul class="org-ul">
<li>Look for test examples to force that code into existence</li>
<li>Avoid writing unnecessary code</li>
</ul></li>
</ul>
</blockquote>
<p>
-- from <a href="https://online-training.jbrains.ca/courses/wbitdd-01/lectures/133486">Add Fractions in Java Part 2 - The World's Best Intro to TDD, Level 1: TDD Done Right - jbrains.c</a>
</p>

<p>
Because <a href="https://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code/">No Code is Better Than No-Code</a>, we should not only delete
(deduplicate) our code as much as possible, but also write as little
production code as possible.
</p>

<p>
Writing tests to justify our decisions to add more code is a great way
to help us to do that.
</p>

<p>
And this is the same reason why we need a failing (RED) test first in
the TDD cycle:
</p>
<ol class="org-ol">
<li>If we expect this test to fail and it does, then we can figure out
the simplest way to pass this test and add as few lines of code as
possible.</li>
<li>If we expect this test to fail but it passes, then great! Our code
can already handle this case now, we don't need to add more code.</li>
</ol>

<p>
Ideally, for every single line of new code, you need to write a
failing test to justify its existence. If you can't do that, you may
need to refactor your code first:
</p>

<blockquote>
<p>
<a href="https://twitter.com/KentBeck/status/250733358307500032">Kent Beck on Twitter: "for each desired change, make the change easy
(warning: this may be hard), then make the easy change"</a>
</p>
</blockquote>

    </div>
</section>
]]></description>
      <pubDate>2018-12-26</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/25/write-tests-to-justify-your-design-decisions</guid>
    </item>
    <item>
      <title>No Code is Better Than No-Code</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-24</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/24/no_code_is_better_than_no-code</guid>
    </item>
    <item>
      <title>The Point of A Degree</title>
      <link>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-13</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/12/12/the_point_of_a_degree</guid>
    </item>
    <item>
      <title>Shall we test our Router?</title>
      <link>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-12-06</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/29/shall_we_test_our_router</guid>
    </item>
    <item>
      <title>$handle_undefined_function in Elixir/Erlang</title>
      <link>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/27/$handle-undefined-function-in-elixir-erlang</guid>
    </item>
    <item>
      <title>Similarities between TDD and Management</title>
      <link>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-11-27</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/11/15/similarities_between_tdd_and_management</guid>
    </item>
    <item>
      <title>Don&#39;t Repeat Your Domain Knowledge</title>
      <link>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-10-26</pubDate>
      <guid>http://dsdshcym.github.io/blog/2018/10/26/dont-repeat-your-domain-knowledge</guid>
    </item>
    <item>
      <title>Clippings from Domain-Driven Design</title>
      <link>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/08/07/clippings-from-domain-driven-design</guid>
    </item>
    <item>
      <title>Clippings from Extreme Programming Explained</title>
      <link>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/02/26/clippings-from-extreme-programming-explained</guid>
    </item>
    <item>
      <title>What Agility Really Means</title>
      <link>http://dsdshcym.github.io/clipping/2018/03/30/what-agility-really-means</link>
      <description><![CDATA[]]></description>
      <pubDate>2018-08-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2018/03/30/what-agility-really-means</guid>
    </item>
  </channel>
</rss>