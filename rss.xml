<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Tue, 19 Dec 2017 20:06:15 CST</pubDate>
    <lastBuildDate>Tue, 19 Dec 2017 20:06:15 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>As the tests get more specific, the code gets more generic</title>
      <link>http://dsdshcym.github.io/blog/2017/12/18/as-the-tests-get-more-specific-the-code-gets-more-generic</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>As the tests get more specific, the code gets more generic</h1>
            <blockquote>
<ul class="org-ul">
<li><a href="http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata">Prime Factors Kata</a></li>
<li>Test code and production code <b>do not grow at the same rate</b> (The
test code grows faster)
<ol class="org-ol">
<li>Sometimes the production code stays the same as the test code grows
<ul class="org-ul">
<li>You are done with the code but you still write the tests because
they are part of the specifications</li>
</ul></li>
<li>Sometimes the production code shrinks as the test code grows
<ul class="org-ul">
<li>Because the programmers moves a load of functionality out of the
code and into the data</li>
<li>Or comes up with some kind of more general algorithm that
satisfies the tests without looking anything like them.</li>
</ul></li>
</ol></li>
</ul>
</blockquote>
<p>
-- from <a href="https://sites.google.com/site/unclebobconsultingllc/home/articles/as-the-tests-get-more-specific-the-code-gets-more-generic">As the Tests get more Specific, the Code gets more Generic - Clean Coder</a>
</p>

<div id="outline-container-org05adc8b" class="outline-2">
<h2 id="org05adc8b">FizzBuzz Kata</h2>
<div class="outline-text-2" id="text-org05adc8b">
<p>
I started practicing Coding Katas<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> to sharp my TDD/OOD skills
several days ago.
</p>

<p>
When I was doing this first Kata, one of my colleagues
(non-programmer) was watching me. So I explained TDD to her.
</p>

<p>
She asked this question later: "But your tests cannot cover all the
cases (all the integers), how can you ensure your code is absolutely
right?"
</p>

<p>
"As the tests get more specific, the code gets more generic" is a part
of my answer. (For other reasons, like programmer confidence stuffs, I
may talk about them in another post.)
</p>
</div>
<div id="outline-container-orgc266742" class="outline-3">
<h3 id="orgc266742">Case #1</h3>
<div class="outline-text-3" id="text-orgc266742">
<ul class="org-ul">
<li><p>
Test
</p>
<div class="org-src-container">
<pre class="src src-ruby">def test_sound_for_1_is_1
  assert_equal '1', FizzBuzz.for(1)
end
</pre>
</div></li>
<li><p>
Code
</p>
<div class="org-src-container">
<pre class="src src-ruby">def self.for(_number)
  '1'
end
</pre>
</div></li>
</ul>
<p>
At this point, we only have one specification, so the code is pretty
simple. (We are following TDD here, so this silly code is completely
acceptable because it's green code.)
</p>
</div>
</div>
<div id="outline-container-orge794097" class="outline-3">
<h3 id="orge794097">Case #2</h3>
<div class="outline-text-3" id="text-orge794097">
<ul class="org-ul">
<li><p>
Test
</p>
<div class="org-src-container">
<pre class="src src-ruby">def test_sound_for_2_is_2
  assert_equal '2', FizzBuzz.for(2)
end
</pre>
</div></li>
<li><p>
Code
</p>
<div class="org-src-container">
<pre class="src src-ruby">def self.for(number)
  if number == 2
    '2'
  else
    '1'
  end
end
</pre>
</div></li>
</ul>
<p>
We are able to see a pattern here (<code>number</code> -&gt; <code>number.to_s</code>). But I
chose to using <code>if</code> and wait for the next test. Because the next test
seems to be very different.
</p>
</div>
</div>
<div id="outline-container-org4a9af6e" class="outline-3">
<h3 id="org4a9af6e">Case #3</h3>
<div class="outline-text-3" id="text-org4a9af6e">
<ul class="org-ul">
<li><p>
Test
</p>
<div class="org-src-container">
<pre class="src src-ruby">def test_sound_for_3_is_Fizz
  assert_equal 'Fizz', FizzBuzz.for(3)
end
</pre>
</div></li>
<li><p>
Code
</p>
<div class="org-src-container">
<pre class="src src-ruby">def self.for(number)
  if number == 3
    'Fizz'
  elsif number == 2
    '2'
  else
    '1'
  end
end
</pre>
</div></li>
</ul>
<p>
The code starts to look ugly now, but fortunately it's still green.
Let's move to our next test.
</p>
</div>
</div>
<div id="outline-container-orgd058195" class="outline-3">
<h3 id="orgd058195">Case #4</h3>
<div class="outline-text-3" id="text-orgd058195">
<ul class="org-ul">
<li><p>
Test
</p>
<div class="org-src-container">
<pre class="src src-ruby">def test_sound_for_4_is_4
  assert_equal '4', FizzBuzz.for(4)
end
</pre>
</div></li>
<li><p>
Code
</p>
<div class="org-src-container">
<pre class="src src-ruby">def self.for(number)
  if number == 3
    'Fizz'
  else
    number.to_s
  end
end
</pre>
</div></li>
</ul>
<p>
We got our third case for <code>number.to_s</code> and at this point I decide to
refactor it this way (Because of the magic number <code>3</code>).
</p>

<p>
We can see here that <b>the code gets more generic</b> (it handles more
cases), while <b>the test gets more specific</b> (it adds a new
specification for input <code>4</code>).
</p>
</div>
</div>
<div id="outline-container-org8b3e398" class="outline-3">
<h3 id="org8b3e398">Case #5</h3>
<div class="outline-text-3" id="text-org8b3e398">
<ul class="org-ul">
<li><p>
Test
</p>
<div class="org-src-container">
<pre class="src src-ruby">def test_sound_for_5_is_Buzz
  assert_equal 'Buzz', FizzBuzz.for(5)
end
</pre>
</div></li>
<li><p>
Code
</p>
<div class="org-src-container">
<pre class="src src-ruby">def self.for(number)
  if number == 3
    'Fizz'
  elsif number == 5
    'Buzz'
  else
    number.to_s
  end
end
</pre>
</div></li>
</ul>
<p>
The same things goes with <code>5, Buzz</code> pairs as <code>3, Fizz</code> pairs. The code
starts from being very specific (only deals with <code>3</code> or <code>5</code>), as the
test gets more specific (case <code>6</code> or <code>10</code> are added), it gets more
generic (deals with numbers have factor <code>3</code> or <code>5</code>).
</p>
</div>
</div>
<div id="outline-container-org154cd26" class="outline-3">
<h3 id="org154cd26">Case #6</h3>
<div class="outline-text-3" id="text-org154cd26">
<ul class="org-ul">
<li><p>
Test
</p>
<div class="org-src-container">
<pre class="src src-ruby">def test_sound_for_6_is_Fizz
  assert_equal 'Fizz', FizzBuzz.for(6)
end
</pre>
</div></li>
<li><p>
Code
</p>
<div class="org-src-container">
<pre class="src src-ruby">def self.for(number)
  if number % 3 == 0
    'Fizz'
  elsif number == 5
    'Buzz'
  else
    number.to_s
  end
end
</pre>
</div></li>
</ul>
<p>
Again, <b>the code gets more generic while the test gets more specific</b>.
</p>
</div>
</div>
</div>
<div id="outline-container-orge347814" class="outline-2">
<h2 id="orge347814">Extracting logic to other classes</h2>
<div class="outline-text-2" id="text-orge347814">
<p>
Later, when the logic for <code>FizzBuzz</code> gets more and more complicated, I
decided to push logic out of <code>FizzBuzz</code> class and extract some new
concepts in our app.
</p>

<div class="org-src-container">
<pre class="src src-ruby">class FizzBuzz
  def initialize(sounds)
    @sounds = sounds
  end

  def for(number)
    sounds
      .detect { |sound| sound.convertable?(number) }
      .for(number)
  end

  private

  attr_reader :sounds
end
</pre>
</div>

<p>
I'll explain more about this refactoring in another post. But the
basic idea is letting sounds to deal with different conversion rules
(<code>Factor3Sound</code> for converting number to <code>Fizz</code>, <code>StringSound</code> for
converting number to <code>number.to_s</code>, etc.)
</p>

<p>
Again, the <code>FizzBuzz</code> code gets more and more generic. Because it's
now a <code>sound</code> rules chain, delegating conversion rules to <code>sound</code>
objects, and just returning the result from the first <code>sound</code> that can
handle the input <code>number</code>.
</p>

<p>
I'll stop our <code>FizzBuzz</code> journey here as it has taken us so long. And
I will talk about "what I learned after I played with <code>FizzBuzz</code> for 3
days" (Chain of Responsibility, and Elixir solution, etc.) in a future
blog post.
</p>
</div>
</div>
<div id="outline-container-org92226a2" class="outline-2">
<h2 id="org92226a2">DRY is not that important for tests</h2>
<div class="outline-text-2" id="text-org92226a2">
<p>
We programmers often says that our code needs to be <b>DRY (Don't Repeat
Yourself)</b>. And I think we can also say "as the tests get more
specific, the code gets more generic" in this way:
</p>
<blockquote>
<p>
<b>DRY up your code as your tests repeat more times.</b>
</p>
</blockquote>

<p>
When we dry up our code, we are actually making our code more
generic/abstract. This is good because it lets us handle as many
possible cases on production as possible.
</p>

<p>
But our test doesn't need to be as DRY as our production code. After
all, a test case should be as specific as possible, because it should
be a specification for a case.
</p>

<p>
The most important thing we need to think about when we write a test
should be <b>making this test as clear as possible</b>. I should be able to
understand what this <i>specification</i> is talking about by <b>only looking
at this test itself</b>.
</p>

<p>
If we try to DRY our test cases as well (like using <code>let</code> or <code>before</code>
in RSpec), we may introduce too many <code>Mystery Guests</code><sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> and making
these tests unreadable.
</p>

<p>
However, this doesn't mean we should not DRY our tests at all. It's
still necessary to extract common assertions/matchers<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> to make
your tests more readable. <b>Our tests need to be DRY as well, but in a
different way from the production DRY.</b>
</p>
</div>
</div>
<div id="outline-container-orgb6d7fd2" class="outline-2">
<h2 id="orgb6d7fd2">A healthy Test-to-Code Ratio</h2>
<div class="outline-text-2" id="text-orgb6d7fd2">
<p>
With this principle being said, I think the Test-to-Code ratio can be
a pretty good guide for us to decide when to refactor our code.
(Alongside with <a href="http://dsdshcym.github.io/blog/2017/08/23/sandi-metzs-rules-for-oop/">Sandi Metz's Rules</a>)
</p>

<p>
IMHO, a good Test-to-Code ratio for a Rails project should be between
1:1 to 2:1. But the ratio definitely differ between different
languages/frameworks/test tools.
</p>
</div>
<div id="outline-container-org0e004cb" class="outline-3">
<h3 id="org0e004cb">Use Test-to-Code Ratio to guide your TDD cycle</h3>
<div class="outline-text-3" id="text-org0e004cb">
<p>
(I'll use 1:1 to 2:1 in the following explanations.)
</p>
<ul class="org-ul">
<li>When Test-to-Code Ratio is lower than 1:1
<ol class="org-ol">
<li>Consider to add more test cases.</li>
<li>Consider if the production code is too DRY.</li>
</ol></li>
<li>When Test-to-Code Ratio is higher than 2:1
<ol class="org-ol">
<li>Consider to DRY the production code by.</li>
<li>Consider if the production code has too many responsibilities
and needs to be split.</li>
</ol></li>
</ul>
</div>
</div>
<div id="outline-container-org334b044" class="outline-3">
<h3 id="org334b044">TDD is a process guided by this thinking</h3>
<div class="outline-text-3" id="text-org334b044">
<p>
As I wrote in <a href="http://dsdshcym.github.io/blog/2017/12/08/book-review-99-bottles-of-oop/#orgb711f32">Book Review: 99 Bottles of OOP</a>, we can only achieve
Shameless Green by following the TDD cycle and make our code a step
more abstract (generic) in each cycle.
</p>

<p>
I think this thinking explained this methodology pretty well.
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="https://leanpub.com/codingdojohandbook">The Coding Dojo Handbook by Emily Bache {Leanpub PDF/iPad/Kindle}</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
<a href="https://robots.thoughtbot.com/mystery-guest">Mystery Guest</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
<a href="http://dsdshcym.github.io/blog/2017/12/01/write-custom-rspec-matchers-to-simplify-your-specs/">Write Custom RSpec Matchers to Simplify Your Specs - dsdshome</a>
</p></div></div>


</div>
</div>
    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/blog/2017/12/18/as-the-tests-get-more-specific-the-code-gets-more-generic</guid>
    </item>
    <item>
      <title>Global Find Clipboard on macOS</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/16/global-find-clipboard-on-mac-os</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Global Find Clipboard on macOS</h1>
            <p>
Turns out that macOS not only has Universal Clipboard to sync the
clipboard content between your Mac and your iOS devices, but also has
a feature called Global Find Clipboard to sync the content between the
Find inputs in different applications.
</p>

<p>
You can try this feature in Safari and Terminal:
</p>
<ol class="org-ol">
<li>Open Safari</li>
<li>Use <code>Cmd-F</code> to search anything (<code>keyword</code> for example)</li>
<li>Open Terminal</li>
<li>Press <code>Cmd-F</code> to see the content in the search bar (it should be
<code>keyword</code> as well)</li>
<li>If you update the content in the Terminal search bar and go back to
Safari, the search content in Safari is updated automatically</li>
</ol>

<p>
-- from
</p>
<ol class="org-ol">
<li><a href="https://twitter.com/njukidreborn/status/941393059337531392">rebornix on Twitter: \"Thanks to @melvinphilips8 for bringing us
Global Find Clipboard on macOS https://t.co/1K1hpkL3C0
https://t.co/xdP3IatLhi\"</a></li>
<li><a href="https://github.com/Microsoft/vscode/issues/39585">Test macOS Global Find Clipboard · Issue #39585 · Microsoft/vscode</a></li>
</ol>

<p>
(Though, it is a nice-to-have feature, but I cannot think of a use
case for it, searching the same word in both Preview and Safari?)
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/16/global-find-clipboard-on-mac-os</guid>
    </item>
    <item>
      <title>How to keep Ruby Relevant?</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/14/how-to-keep-ruby-relevant</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>How to keep Ruby Relevant?</h1>
            <blockquote>
<ul class="org-ul">
<li>How to keep Ruby Relevant?
<ol class="org-ol">
<li>Talk about Ruby More</li>
<li>Learn new ideas</li>
<li>Help maintain abandoned libraries</li>
<li>Build new libraries</li>
<li>Build new products with Ruby</li>
<li>Teach people Ruby</li>
</ol></li>
<li>Ruby literally changed my life</li>
</ul>
</blockquote>
<p>
-- from <a href="https://www.youtube.com/watch?v=PiT2XEWae1c&amp;list=PLE7tQUdRKcyayGHjjxZOmVEGsxX-rczZt&amp;index=20">RubyConf 2017: Saving Ruby from the Apocalypse by Jason Charnes - YouTube</a>
</p>

<p>
Ruby literally changed my life, too.
</p>
<ul class="org-ul">
<li>It brought me to Strikingly (An extremely awesome team)</li>
<li>It taught me how to write real Object-Oriented world (with TDD).</li>
<li>It made me know programming can be so much enjoyable.</li>
</ul>

<p>
This talk was also mentioned in <a href="https://overcast.fm/+DuavCGVqo">134: Fastributes — The Bike Shed — Overcast</a>
</p>

<p>
P.S. The speaker deals with the false fire alarm pretty well. "Is this
(the Apocalypse) really happening?"
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/14/how-to-keep-ruby-relevant</guid>
    </item>
    <item>
      <title>Imperative Shell around the Functional Core</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Imperative Shell around the Functional Core</h1>
            <p>
Elixir is the perfect language to build upon the methodology from this talk:
</p>
<blockquote>
<p>
Imperative Shell around the Functional Core
</p>
</blockquote>
<p>
-- from <a href="https://www.youtube.com/watch?v=yTkzNHF6rMs">RubyConf 12 - Boundaries by Gary Bernhardt - YouTube</a>
</p>

<p>
Elixir data structures are obviously immutable, and the code and data
are combined within the same <code>Module</code>. (The <code>FauxO</code> style programming
from this talk.)
</p>

<p>
And Gary even introduced Actor Model which is the concurrency model
used by Elixir/Erlang.
</p>

<p>
In Ruby, we need some self-disciplines to force ourselves to write an
imperative shell around the functional core. But in Elixir, the
language is already encouraging us to write code in this style. I
think that's why I feel so excited about Elixir.
</p>

<p>
This talk was also mentioned in:
</p>
<ol class="org-ol">
<li><a href="http://www.fullstackradio.com/78">78: Ben Orenstein - Our All-Time Favorite Refactorings | Full Stack Radio</a></li>
<li><a href="https://www.youtube.com/watch?v=9TmJZSBYPQA&amp;index=14&amp;list=PLTUHmtFhYC6iEwu4h2REYhNKCHFFHYngS">14 - 刘常洋 - Functional Programming Concepts - YouTube</a></li>
</ol>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/imperative-shell-around-the-functional-core</guid>
    </item>
    <item>
      <title>Notes from &quot;Why VSCode is better than Atom? - Teahour.fm&quot;</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/15/notes-from-why-vscode-is-better-than-atom-teahour-fm</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Notes from &quot;Why VSCode is better than Atom? - Teahour.fm&quot;</h1>
            <blockquote>
<ul class="org-ul">
<li>在 Microsoft 可以用 Mac 开发</li>
<li>评价编辑器好坏的几个方面
<ol class="org-ol">
<li>足够快
<ul class="org-ul">
<li>打开文件</li>
<li>搜索</li>
</ul></li>
<li>语法高亮</li>
<li>提高生产力
<ul class="org-ul">
<li>keybinding</li>
</ul></li>
<li>项目契合度</li>
</ol></li>
<li>Atom 比 VSCode 先进的地方
<ul class="org-ul">
<li>能改动界面（VSC 注重 Performance，不提供 UI API）</li>
<li>但造成性能问题</li>
</ul></li>
<li>Text Data Structure 对编辑器性能的影响很大
<ul class="org-ul">
<li>Array vs Red/Black Tree</li>
</ul></li>
<li>Electron is the new Flash</li>
</ul>
</blockquote>

<p>
-- from <a href="http://teahour.fm/2017/12/12/why-vscode-is-better-than-atom.html">Why VSCode is better than Atom? - Teahour.fm</a>
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/15/notes-from-why-vscode-is-better-than-atom-teahour-fm</guid>
    </item>
    <item>
      <title>Teahour: PingCAP 数据库及编程语言</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/18/teahour-ping-cap</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Teahour: PingCAP 数据库及编程语言</h1>
            <p>
一期长达 3 小时的 Teahour。
</p>

<p>
比较震惊的一点是 PingCAP 为了跑测试还另外搭建了分布式的测试系统，将原来两个多小时的 CI 时间缩短到 7 分钟。
</p>

<p>
感觉干货颇多，放一个简要的摘要在这里，如果有兴趣请务必去 Teahour 上听。
</p>

<blockquote>
<ul class="org-ul">
<li>测试是数据库的命脉</li>
<li>pg 是更学院派，更先进的数据库</li>
<li>mysql 更接地气</li>
<li>mongodb 营销做得好，技术上需要加强</li>
<li>企业级技术栈在经历从闭源到开源的变革</li>
<li>Gifey (goggle infrastructure for everyone else)</li>
<li>C++ 越来越像 Rust
<ul class="org-ul">
<li>C++17</li>
</ul></li>
<li>所有不会写代码的 CTO 都是忽悠
<ul class="org-ul">
<li>必须热爱写代码</li>
</ul></li>
<li>代码风格要跟着社区走</li>
<li>数据库在未来会越来越去中心化
<ul class="org-ul">
<li>像区块链</li>
<li>所有人用同一个数据库（分布式）</li>
</ul></li>
<li>Picks
<ul class="org-ul">
<li>大教堂与集市 开源圣经</li>
<li>Unix 编程艺术</li>
<li>Code Rush</li>
<li>操作系统革命</li>
<li>硅谷海盗</li>
<li>Dynamo</li>
<li>GFS</li>
<li>Big Table</li>
<li>Finding a needle in Haystack: Facebook's photo storage</li>
<li>Introducing mcrouter: A memcached protocol router</li>
</ul></li>
</ul>
</blockquote>
<p>
-- from <a href="http://teahour.fm/2017/11/22/new-database-go-and-rust-with-cto-of-pingcap.html">和 PingCAP CTO 畅谈数据库和编程语言 - Teahour.fm</a>
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/18/teahour-ping-cap</guid>
    </item>
    <item>
      <title>Turn a long letter into a short one</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Turn a long letter into a short one</h1>
            <p>
<a href="http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-youre-writing-a-letter/write-your-code-as-if-you're-writing-a-letter/">Writing code is just like writing a letter to other developers or your
future self</a>.
</p>

<p>
It takes time to write this letter short and abstract so it can be
read easily.
</p>

<blockquote>
<p>
Take the time to turn a long letter into a short one.
</p>
</blockquote>
<p>
-- from <a href="https://m.signalvnoise.com/the-majestic-monolith-29166d022228">The Majestic Monolith – Signal v. Noise</a>
</p>

<blockquote>
<p>
I didn't have time to write a short letter, so I wrote a long one
instead.
</p>
</blockquote>
<p>
-- from <a href="https://www.goodreads.com/quotes/21422-i-didn-t-have-time-to-write-a-short-letter-so">Quote by Mark Twain: “I didn't have time to write a short letter, so ...”</a>
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/12/turn-a-long-letter-into-a-short-one</guid>
    </item>
    <item>
      <title>Use git bisect run to automatically find the first bad commit</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/14/use-git-bisect-run-to-automatically-find-the-first-bad-commit</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Use git bisect run to automatically find the first bad commit</h1>
            <blockquote>
<p>
Use <code>git bisect</code> to find the first bad commit.
</p>
</blockquote>
<p>
-- from <a href="https://www.youtube.com/watch?v=VMcMqrpjAjU">RubyConf 2017: "RSpec no longer works with ActiveRecord" by Sam Phippen - YouTube</a>
</p>

<p>
In this talk, Sam showed us how he debugged a rspec issue using <code>git bisect</code>.
</p>

<p>
But he is just manually using <code>git bisect good</code> and <code>git bisect bad</code>
to mark a commit as good/bad.
</p>

<p>
Actually, <code>git bisect</code> can run the script automatically:
</p>
<ol class="org-ol">
<li><code>git bisect start</code></li>
<li><code>git bisect good HEAD~4</code> (for example)</li>
<li><code>git bisect bad HEAD</code></li>
<li><code>git bisect run rspec spec/services/some_spec.rb</code></li>
</ol>
<p>
Then <code>git bisect</code> will automatically run the script and find the first
commit from which this spec started to fail.
</p>

<p>
But in this talk's case, we need to run the script in another git
directory. We can use shell script to switch to that directory first
and then run the test suite:
</p>

<div class="org-src-container">
<pre class="src src-sh">git bisect run sh -c 'cd another/project/; rspec spec/in/that/project'
</pre>
</div>

<p>
Of course, there are more complicated issues in real life projects,
like <code>gem</code> dependency issue in the talk. We can always fallback to
manually tagging a commit as good/bad if we find something unexpected
from the log of <code>git bisect run</code>.
</p>

<p>
You can also read more about <code>git bisect</code>, <code>rspec bisect</code> in my
previous post: <a href="http://dsdshcym.github.io/blog/2017/09/17/rspec-failures-caused-by-i18nlocale/">RSpec failures caused by I18n.locale - dsdshome</a>
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/14/use-git-bisect-run-to-automatically-find-the-first-bad-commit</guid>
    </item>
    <item>
      <title>What&#39;s Next For Phoenix</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/16/whats-next-for-phoenix</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>What&#39;s Next For Phoenix</h1>
            <p>
I just watched this another great talk from Chris McCord (creator of
Phoenix).
</p>

<p>
The part explaining Contexts was super awesome. <code>Context</code> really is
the way to write good code:
</p>
<blockquote>
<p>
Write dedicated modules that expose and group related functionality.
</p>
</blockquote>

<p>
And Chris also talked about what new features would come in Phoenix
1.4. Definitely worth check out.
</p>

<div id="outline-container-org2269402" class="outline-2">
<h2 id="org2269402">Notes</h2>
<div class="outline-text-2" id="text-org2269402">
<ul class="org-ul">
<li>What makes a good Elixir Program? -&gt; What makes a good Program?
<ul class="org-ul">
<li>Easy to write</li>
<li>Easy to understand</li>
<li>Easy to change</li>
</ul></li>
<li>Programming is hard. Teaching programming is harder.</li>
<li>OOP -&gt; FP
<ul class="org-ul">
<li>Design Patterns are baggage in FP world</li>
<li><code>Mod.fun/arity</code> is not quite enough</li>
</ul></li>
<li>Contexts
<ul class="org-ul">
<li>Dedicated modules that expose and group related functionality</li>
<li>Don't be afraid to make decisions (context names)</li>
<li><p>
New comers are affected by Context thinking (explain Social
Reaction to a new comer)
</p>
<div class="org-src-container">
<pre class="src src-elixir">defmodule Reaction do
  alias CommunityContent.Post

  def add_like(user, %Post{} = post)

  def get_stats(post)
end

defmodule Reaction.PostReaction do
  schema "post_reactions" do
    field :user_id, :id
    field :post_id, :id
    field :sentiment, :string
  end
end
</pre>
</div></li>
<li>Experienced Erlang/Elixir developers are affected too
<ul class="org-ul">
<li>With Phoenix 1.1 =&gt; interleaved code</li>
<li>Clean up =&gt; "service" modules (like contexts)</li>
<li><b>It's important to have generators that encourages clean
boundaries</b></li>
</ul></li>
</ul></li>
<li>Phoenix 1.4: <b>Monitoring &amp; Metrics</b>
<ul class="org-ul">
<li>Application Performance Monitor (APM)
<ul class="org-ul">
<li>Common Interface for
<ul class="org-ul">
<li>elixir monitoring</li>
<li>Monitoring services (Datadog, NewRelic, etc.)</li>
</ul></li>
<li>Goals
<dl class="org-dl">
<dt>Efficiency</dt><dd>Data collection must not take out the application under load</dd>
<dt>Insights</dt><dd>Metrics should provide actionable insights for <i>non-experts</i></dd>
</dl></li>
<li>Available Metrics
<dl class="org-dl">
<dt>Gauge</dt><dd>instantaneous measurement
<ul class="org-ul">
<li>CPU usage</li>
<li>Memory usage</li>
</ul></dd>
<dt>Meter/Timer</dt><dd>rate of events over time with statistical distribution
<ul class="org-ul">
<li>requests per second</li>
</ul></dd>
<dt>Instrumenter</dt><dd>compile-time hooks into application events</dd>
</dl></li>
</ul></li>
<li>Breakpoint Debugger</li>
<li>Developer Dashboard</li>
<li>End-to-End Testing
<ul class="org-ul">
<li>Concurrent</li>
<li>Transactional</li>
<li><p>
JavaScript tests:
</p>

<p>
Call Phoenix endpoints to check-out/check-in Ecto Sandbox
connection
</p>
<div class="org-src-container">
<pre class="src src-elixir">def checkout(conn, _params) do
  Phoenix.Ecto.Sandbox.checkout(conn)
end

def checkin(conn, _params) do
  Phoenix.Ecto.Sandbox.checkin(conn)
end
</pre>
</div></li>
</ul></li>
<li>Easier Contribution
<ul class="org-ul">
<li>1st Contribution Sprint</li>
<li>Phoenix Guides are merged</li>
</ul></li>
</ul></li>
<li>Phoenix/Elixir have enabled many people building many useful stuffs
<ul class="org-ul">
<li>Make the previously unachievable, achievable</li>
</ul></li>
</ul>
<p>
-- from <a href="https://www.youtube.com/watch?v=zbbK0WOvWII">ElixirConf 2017 - Closing Keynote - Chris McCord - YouTube</a>
</p>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/16/whats-next-for-phoenix</guid>
    </item>
    <item>
      <title>Write your code as if you&#39;re writing a letter</title>
      <link>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-you&#39;re-writing-a-letter</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Write your code as if you&#39;re writing a letter</h1>
            <blockquote>
<p>
Next time you have to write any significant amount of code, imagine
that you are going to have to write a letter that teaches someone how
to reproduce it. The only code you can show them are tests. It really
changes how you approach the problem.
</p>
</blockquote>

<p>
-- from <a href="https://twitter.com/jamis/status/939183075291947008">Jamis Buck on Twitter: "Next time you have to write any
   significant amount of code, imagine that you are going to have to
   write a letter that teaches someone how to…
   https://t.co/vjk0Uh7Eya"</a>
</p>

    </div>
</section>
]]></description>
      <pubDate>2017-12-19</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2017/12/11/write-your-code-as-if-you&#39;re-writing-a-letter</guid>
    </item>
  </channel>
</rss>