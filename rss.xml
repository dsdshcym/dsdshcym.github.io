<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dsdshome</title>
    <link>http://dsdshcym.github.io</link>
    <description>This is my small blog :)</description>
    <pubDate>Fri, 07 Jun 2019 09:02:27 CST</pubDate>
    <lastBuildDate>Fri, 07 Jun 2019 09:02:27 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Pattern Matching is FP&#39;s Polymorphism Affordance</title>
      <link>http://dsdshcym.github.io/clipping/2019/06/06/pattern-matching-is-fp&#39;s-polymorphism-affordance</link>
      <description><![CDATA[<section id="content" role="main">
    <div id="outline-container-sec-" class="row" style="padding-top: 70px">
        <div class="col-md-2"></div>
            <h1>Pattern Matching is FP&#39;s Polymorphism Affordance</h1>
            <div id="outline-container-org6117ada" class="outline-2">
<h2 id="org6117ada">What's Affordance</h2>
<div class="outline-text-2" id="text-org6117ada">
<p>
From <a href="https://www.sandimetz.com/blog/2018/21/what-does-oo-afford">What Does OO Afford?</a> by Sandi Metz,
</p>
<blockquote>
<ul class="org-ul">
<li>(OO) Affordance is:
<ol class="org-ol">
<li>the qualities or properties of an object that define its possible
uses or make clear how it can or should be used.</li>
<li>a potential action enabled by an object.</li>
</ol></li>
<li>Different Programming Languages Offer Different Affordances
<ul class="org-ul">
<li>programming languages are explicitly designed to "enable" certain
kinds of thinking.</li>
<li>Languages have points-of-view: they're designed to be used in
certain stylized ways.</li>
</ul></li>
</ul>
</blockquote>

<p>
Basically, a programming language affordance is a language feature
that enables programmer to think in a certain way.
</p>
</div>
</div>
<div id="outline-container-org70734b1" class="outline-2">
<h2 id="org70734b1">Why Pattern Matching is FP's Polymorphism Affordance</h2>
<div class="outline-text-2" id="text-org70734b1">
<p>
Take Elixir for example, Pattern Matching is how an Elixir function
provides different behavior for different structs (data
structures). Furthermore, it's the secret sauce behind <code>Protocol</code>,
which is one of the official ways to support Polymorphism in Elixir.
</p>

<p>
And this idea was also mentioned in the talk <a href="https://www.youtube.com/watch?v=S2-1Rt-R2cY">ElixirConf 2017 - Its
Better Unstated - TJ Stankus</a>:
</p>
<blockquote>
<ul class="org-ul">
<li>Affordances in Elixir for avoiding conditionals
<ol class="org-ol">
<li>Lists</li>
<li>Pattern matching</li>
<li>Guard clauses</li>
<li>Recursion</li>
</ol></li>
</ul>
</blockquote>
</div>
</div>
<div id="outline-container-org5082ba3" class="outline-2">
<h2 id="org5082ba3">Bonus: FP and OOP are compatible</h2>
<div class="outline-text-2" id="text-org5082ba3">
<p>
Polymorphism Affordance in FP also proves the point that <a href="http://dsdshcym.github.io/clipping/2018/04/26/fp_and_oop_are_compatible_and_should_be/">FP and OOP
are compatible</a>:
</p>

<p>
FP and OO are just two programming preferences. They offer different
affordances when they first started. And both modern FP languages and
modern OO languages can provide affordances from the other paradigm.
</p>

<p>
And that's why this tweet came out:
</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Shower thought: Smalltalk (and to some extent other OO languages) replace pattern matching with dynamic dispatch.<br><br>I miss pattern matching in Lisp dialects without a good implementation, but I haven&#39;t noticed its absence in Smalltalk.</p>&mdash; Wilfred Hughes (@_wilfredh) <a href="https://twitter.com/_wilfredh/status/1133100857602510848?ref_src=twsrc%5Etfw">May 27, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
</div>

    </div>
</section>
]]></description>
      <pubDate>2019-06-07</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/06/06/pattern-matching-is-fp&#39;s-polymorphism-affordance</guid>
    </item>
    <item>
      <title>Clippings from Crucial Conversations</title>
      <link>http://dsdshcym.github.io/clipping/2019/06/05/clippings-from-crucial-conversations</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-06-05</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/06/05/clippings-from-crucial-conversations</guid>
    </item>
    <item>
      <title>Clippings of 2019 May</title>
      <link>http://dsdshcym.github.io/clipping/2019/06/04/clippings-of-2019-may</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-06-04</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/06/04/clippings-of-2019-may</guid>
    </item>
    <item>
      <title>Estimating is Hard, Let&#39;s Cut Scope!</title>
      <link>http://dsdshcym.github.io/blog/2019/05/27/estimating-is-hard-lets-cut-scope</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-30</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/27/estimating-is-hard-lets-cut-scope</guid>
    </item>
    <item>
      <title>My GTD Workflow (2019 ver.)</title>
      <link>http://dsdshcym.github.io/blog/2019/05/22/my-gtd-workflow-2019-ver</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-25</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/22/my-gtd-workflow-2019-ver</guid>
    </item>
    <item>
      <title>The Modular Monolith: Elixir Architecture</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/24/the-modular-monolith-elixir-architecture</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-25</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/24/the-modular-monolith-elixir-architecture</guid>
    </item>
    <item>
      <title>Defining a MVP by Setting OKRs</title>
      <link>http://dsdshcym.github.io/blog/2019/05/16/defining-a-mvp-by-setting-okrs</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-21</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/16/defining-a-mvp-by-setting-okrs</guid>
    </item>
    <item>
      <title>Set Restrictions to Make People Restrictionless</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/16/set-restrictions-to-make-people-restrictionless</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-17</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/16/set-restrictions-to-make-people-restrictionless</guid>
    </item>
    <item>
      <title>Why Do We Need a Plan?</title>
      <link>http://dsdshcym.github.io/clipping/2019/05/15/why-do-we-need-a-plan</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-16</pubDate>
      <guid>http://dsdshcym.github.io/clipping/2019/05/15/why-do-we-need-a-plan</guid>
    </item>
    <item>
      <title>Book Review: A Philosophy of Software Design</title>
      <link>http://dsdshcym.github.io/blog/2019/05/14/book-review-a-philosophy-of-software-design</link>
      <description><![CDATA[]]></description>
      <pubDate>2019-05-15</pubDate>
      <guid>http://dsdshcym.github.io/blog/2019/05/14/book-review-a-philosophy-of-software-design</guid>
    </item>
  </channel>
</rss>